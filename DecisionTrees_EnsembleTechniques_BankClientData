{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Input variables:\n",
    "\n",
    "# bank client data:\n",
    "1 - age (numeric)\n",
    "2 - job : type of job (categorical: 'admin.','blue collar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','unknown')\n",
    "3 - marital : marital status (categorical: 'divorced','married','single','unknown'; note: 'divorced' means divorced or widowed)\n",
    "4 - education (categorical: 'basic.4y','basic.6y','basic.9y','high.school','illiterate','professional.course','university.degree','unknown')\n",
    "5 - default: has credit in default? (categorical: 'no','yes','unknown')\n",
    "6- balance â€“ average yearly balance in euros(numeric)\n",
    "7 - housing: has housing loan? (categorical: 'no','yes','unknown')\n",
    "8 - loan: has personal loan? (categorical: 'no','yes','unknown')\n",
    "# related with the last contact of the current campaign:\n",
    "9 - contact: contact communication type (categorical: 'cellular','telephone') \n",
    "10 - day: last contact day of the month (categorical: 'mon','tue','wed','thu','fri')\n",
    "11 - month: last contact month of year (categorical: 'jan', 'feb', 'mar', ..., 'nov', 'dec')\n",
    "12 - duration: last contact duration, in seconds (numeric). Important note: this attribute highly affects the output target (e.g., if duration=0 then y='no'). Yet, the duration is not known before a call is performed. Also, after the end of the call y is obviously known. Thus, this input should only be included for benchmark purposes and should be discarded if the intention is to have a realistic predictive model.\n",
    "\n",
    "# other attributes:\n",
    "13 - campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact)\n",
    "14 - pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted)\n",
    "15 - previous: number of contacts performed before this campaign and for this client (numeric)\n",
    "16 - poutcome: outcome of the previous marketing campaign (categorical: 'failure','nonexistent','success')\n",
    "\n",
    "Output variable (desired target):\n",
    "17 - y - has the client subscribed a term deposit? (binary: 'yes','no')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 712,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 713,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_bank = pd.read_csv('bank-full.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 714,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>management</td>\n",
       "      <td>married</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>no</td>\n",
       "      <td>2143</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>261</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>44</td>\n",
       "      <td>technician</td>\n",
       "      <td>single</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>29</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>151</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>33</td>\n",
       "      <td>entrepreneur</td>\n",
       "      <td>married</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>2</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>76</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>47</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>married</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "      <td>1506</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>92</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>33</td>\n",
       "      <td>unknown</td>\n",
       "      <td>single</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "      <td>1</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>198</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age           job  marital  education default  balance housing loan  \\\n",
       "0   58    management  married   tertiary      no     2143     yes   no   \n",
       "1   44    technician   single  secondary      no       29     yes   no   \n",
       "2   33  entrepreneur  married  secondary      no        2     yes  yes   \n",
       "3   47   blue-collar  married    unknown      no     1506     yes   no   \n",
       "4   33       unknown   single    unknown      no        1      no   no   \n",
       "\n",
       "   contact  day month  duration  campaign  pdays  previous poutcome Target  \n",
       "0  unknown    5   may       261         1     -1         0  unknown     no  \n",
       "1  unknown    5   may       151         1     -1         0  unknown     no  \n",
       "2  unknown    5   may        76         1     -1         0  unknown     no  \n",
       "3  unknown    5   may        92         1     -1         0  unknown     no  \n",
       "4  unknown    5   may       198         1     -1         0  unknown     no  "
      ]
     },
     "execution_count": 714,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1.1 Univariate Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 715,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age           int64\n",
       "job          object\n",
       "marital      object\n",
       "education    object\n",
       "default      object\n",
       "balance       int64\n",
       "housing      object\n",
       "loan         object\n",
       "contact      object\n",
       "day           int64\n",
       "month        object\n",
       "duration      int64\n",
       "campaign      int64\n",
       "pdays         int64\n",
       "previous      int64\n",
       "poutcome     object\n",
       "Target       object\n",
       "dtype: object"
      ]
     },
     "execution_count": 715,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 716,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>age</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>40.936210</td>\n",
       "      <td>10.618762</td>\n",
       "      <td>18.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>95.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>balance</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>1362.272058</td>\n",
       "      <td>3044.765829</td>\n",
       "      <td>-8019.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>448.0</td>\n",
       "      <td>1428.0</td>\n",
       "      <td>102127.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>day</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>15.806419</td>\n",
       "      <td>8.322476</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>duration</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>258.163080</td>\n",
       "      <td>257.527812</td>\n",
       "      <td>0.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>319.0</td>\n",
       "      <td>4918.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>campaign</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>2.763841</td>\n",
       "      <td>3.098021</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>63.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>pdays</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>40.197828</td>\n",
       "      <td>100.128746</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>871.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>previous</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.580323</td>\n",
       "      <td>2.303441</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>275.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            count         mean          std     min    25%    50%     75%  \\\n",
       "age       45211.0    40.936210    10.618762    18.0   33.0   39.0    48.0   \n",
       "balance   45211.0  1362.272058  3044.765829 -8019.0   72.0  448.0  1428.0   \n",
       "day       45211.0    15.806419     8.322476     1.0    8.0   16.0    21.0   \n",
       "duration  45211.0   258.163080   257.527812     0.0  103.0  180.0   319.0   \n",
       "campaign  45211.0     2.763841     3.098021     1.0    1.0    2.0     3.0   \n",
       "pdays     45211.0    40.197828   100.128746    -1.0   -1.0   -1.0    -1.0   \n",
       "previous  45211.0     0.580323     2.303441     0.0    0.0    0.0     0.0   \n",
       "\n",
       "               max  \n",
       "age           95.0  \n",
       "balance   102127.0  \n",
       "day           31.0  \n",
       "duration    4918.0  \n",
       "campaign      63.0  \n",
       "pdays        871.0  \n",
       "previous     275.0  "
      ]
     },
     "execution_count": 716,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.describe().transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 717,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(45211, 17)"
      ]
     },
     "execution_count": 717,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Analyse Missing Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 718,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [age, job, marital, education, default, balance, housing, loan, contact, day, month, duration, campaign, pdays, previous, poutcome, Target]\n",
       "Index: []"
      ]
     },
     "execution_count": 718,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank[df_bank.isnull().any(axis = 1)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are no null values in the dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 719,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [age, job, marital, education, default, balance, housing, loan, contact, day, month, duration, campaign, pdays, previous, poutcome, Target]\n",
       "Index: []"
      ]
     },
     "execution_count": 719,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank[df_bank.isna().any(axis=1)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are no NAN values in the dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 720,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['job', 'marital', 'education', 'default', 'housing', 'loan', 'contact',\n",
       "       'month', 'poutcome', 'Target'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 720,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.select_dtypes(include=['object']).columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 721,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "job:\n",
      "['management' 'technician' 'entrepreneur' 'blue-collar' 'unknown'\n",
      " 'retired' 'admin.' 'services' 'self-employed' 'unemployed' 'housemaid'\n",
      " 'student']\n",
      "\n",
      "marital status:\n",
      "['married' 'single' 'divorced']\n",
      "\n",
      "education:\n",
      "['tertiary' 'secondary' 'unknown' 'primary']\n",
      "\n",
      "default:\n",
      "['no' 'yes']\n",
      "\n",
      "housing:\n",
      "['yes' 'no']\n",
      "\n",
      "loan:\n",
      "['no' 'yes']\n",
      "\n",
      "contact:\n",
      "['unknown' 'cellular' 'telephone']\n",
      "\n",
      "month:\n",
      "['may' 'jun' 'jul' 'aug' 'oct' 'nov' 'dec' 'jan' 'feb' 'mar' 'apr' 'sep']\n",
      "\n",
      "poutcome:\n",
      "['unknown' 'failure' 'other' 'success']\n",
      "\n",
      "Target:\n",
      "['no' 'yes']\n"
     ]
    }
   ],
   "source": [
    "print('\\njob:') \n",
    "print(df_bank.job.unique())\n",
    "print('\\nmarital status:')\n",
    "print(df_bank.marital.unique())\n",
    "print('\\neducation:')\n",
    "print(df_bank.education.unique())\n",
    "print('\\ndefault:')\n",
    "print(df_bank.default.unique())\n",
    "print('\\nhousing:')\n",
    "print(df_bank.housing.unique())\n",
    "print('\\nloan:')\n",
    "print(df_bank.loan.unique())\n",
    "print('\\ncontact:')\n",
    "print(df_bank.contact.unique())\n",
    "print('\\nmonth:')\n",
    "print(df_bank.month.unique())\n",
    "print('\\npoutcome:')\n",
    "print(df_bank.poutcome.unique())\n",
    "print('\\nTarget:')\n",
    "print(df_bank['Target'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 722,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['age', 'job', 'marital', 'education', 'default', 'balance', 'housing',\n",
      "       'loan', 'contact', 'day', 'month', 'duration', 'campaign', 'pdays',\n",
      "       'previous', 'poutcome', 'Target'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(df_bank.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1.2 Multivariate Analysis "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 723,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import dexplot as dxp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 724,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c4e127358>"
      ]
     },
     "execution_count": 724,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(df_bank.Target,order = ['yes', 'no'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 725,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c504d50b8>"
      ]
     },
     "execution_count": 725,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX4AAAEGCAYAAABiq/5QAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAU/klEQVR4nO3df7BfdX3n8ecriciv8isGCgEa9DL+qBrEK+Pqylh+uNStgKvuuuvqbZcusx03xO5OV6uO0C5rdddZq0xribK7cbbrj0EttrYpmIILamlv+FF+uokUEEjhGkCIKJDkvX/cA+THTbxozvfc5PN8zGS+38+553y/r2S+87qfnHO+56SqkCS1Y97QASRJo2XxS1JjLH5JaozFL0mNsfglqTELhg4wG8973vNqyZIlQ8eQpD3KmjVrvl9Vi7ZfvkcU/5IlS5icnBw6hiTtUZLcNdNyd/VIUmMsfklqjMUvSY2x+CWpMRZ/YzZs2MB5553Hhg0bho4ibcPP5uhY/I1ZuXIlN910E5/97GeHjiJtw8/m6Fj8DdmwYQOrVq2iqli1apUzK80ZfjZHy+JvyMqVK9myZQsAmzdvdmalOcPP5mhZ/A35+te/zqZNmwDYtGkTV1xxxcCJpGl+NkfL4m/I6173ul2OpaGcdtppzJs3XUfz5s3j9NNPHzjR3s3ib4h3W9NcNTEx8fSuni1btvCud71r4ER7N4u/Iddcc80246uvvnqgJNK2HnrooV2OtXtZ/A057bTTmD9/PgDz58/3v9OaMy688MJdjrV7WfwNmZiYeLr4FyxY4H+nNWfceeeduxxr97L4G7Jw4ULOOOMMknDGGWewcOHCoSNJABx55JHbjI866qiBkrRhj7gev3afiYkJ7rzzTmf7mtM8EaFfFn9jFi5cyCc/+cmhY0jbWL9+/S7H2r3c1SNpcNvfWtVbrfar1+JPsjzJzUluSfKebtlhSa5IsrZ7PLTPDJLmvg9+8IO7HGv36q34k7wU+LfAScBS4FeSHA+8D1hdVccDq7uxJGlE+pzxvxj466p6rKo2Ad8A3gycBazs1lkJnN1jBm1ncnKSU045hTVr1gwdRXqa5/GPVp/FfzNwcpKFSfYH3ggcAxxRVesBusfDZ9o4yblJJpNMTk1N9RizLRdccAFbtmzh/PPPHzqK9DTP4x+t3oq/qm4DPgpcAawCbgQ2PYvtV1TVeFWNL1q0qKeUbZmcnGTjxo0AbNy40Vm/5gwP7o5Wrwd3q+qSqjqxqk4GHgTWAvcnORKge3ygzwx6xgUXXLDN2Fm/5goP7o5W32f1HN49Hgv8M+BzwFeBiW6VCeCyPjPoGU/N9nc2loYyNjb29Cx/yZIljI2NDRtoL9f3efxfSnIr8KfAu6vqIeAjwOlJ1gKnd2ONQJJdjqUhvfnNbwbgLW95y8BJ9n69fnO3qna400dVbQBO7fN9NbPtvwbv1+I1l3z6058G4OKLL+ZNb3rTwGn2bn5ztyHHHHPMLsfSUDzxYLQs/oY8//nP32b8ghe8YKAk0rY88WC0LP6GfOtb39pm/M1vfnOgJNK2PPFgtCz+hjz55JO7HEtqg8UvSY2x+Bvi6Zyaq+bNm7fLsXYv/3Ub8rKXvWyXY2konmo8WhZ/Q26//fZdjqWhWPyjZfE3xIO7ksDib4qzKklg8UtScyx+SWqMxS9JjbH4JakxFr8kNcbil6TGWPyS1Ji+77n7m0luSXJzks8l2TfJcUmuTbI2yReS7NNnBknStnor/iSLgfOA8ap6KTAfeDvwUeDjVXU88BBwTl8ZJEk76ntXzwJgvyQLgP2B9cApwKXdz1cCZ/ecQZK0ld6Kv6ruBT4G3M104f8AWAM8XFWbutXuARbPtH2Sc5NMJpmcmprqK6YkNafPXT2HAmcBxwFHAQcAvzzDqjNeMKaqVlTVeFWNL1q0qK+YktScPnf1nAb8fVVNVdWTwJeB1wCHdLt+AI4G7usxgyRpO30W/93Aq5Psn+lbPZ0K3ApcCby1W2cCuKzHDJKk7Sz4yav8dKrq2iSXAtcBm4DrgRXA14DPJ7mwW3ZJXxkk/WQXXXQR69atGzTDQQcdxCOPPPL0+OCDD2b58uWDZBkbG2PZsmWDvPeo9Fb8AFV1PnD+dovvAE7q830l7VmOO+44brzxxqfHS5YsGS5MA3otfklz31yZ3Z555pk88sgjnH766XzgAx8YOs5ezeKXNCccd9xxAJb+CHitHklqjMUvSY2x+CWpMRa/JDXG4pekxlj8ktQYi1+SGmPxS1JjLH5JaozFL0mNsfglqTEWvyQ1xuKXpMZY/JLUmD5vtv7CJDds9eeRJO9JcliSK5Ks7R4P7SuDJGlHvRV/VX2nqk6oqhOAVwKPAV8B3gesrqrjgdXdWJI0IqO6EcupwHer6q4kZwGv75avBK4C3juiHIOZC/c1nYn3NZXaM6p9/G8HPtc9P6Kq1gN0j4fPtEGSc5NMJpmcmpoaUUxJ2vv1PuNPsg9wJvDbz2a7qloBrAAYHx+vHqKN1FyZ3b7+9a9/+vlVV101WA5JwxnFjP+Xgeuq6v5ufH+SIwG6xwdGkEHb2WeffYaOIGkgoyj+f8kzu3kAvgpMdM8ngMtGkEGdpUuXsnTpUi6//PKho0gaSK/Fn2R/4HTgy1st/ghwepK13c8+0mcGSdK2et3HX1WPAQu3W7aB6bN8JEkD8Ju7ktQYi1+SGmPxS1JjLH5JaozFL0mNsfglqTEWvyQ1xuKXpMZY/JLUGItfkhpj8UtSYyx+SWqMxS9JjbH4JakxFr8kNcbil6TGWPyS1Ji+b714SJJLk9ye5LYk/yjJYUmuSLK2ezy0zwySpG31PeP/BLCqql4ELAVuA94HrK6q44HV3ViSNCK9FX+Sg4CTgUsAquqJqnoYOAtY2a22Eji7rwySpB31OeN/PjAF/M8k1yf5TJIDgCOqaj1A93j4TBsnOTfJZJLJqampHmNKUlv6LP4FwInAp6rqFcAPeRa7dapqRVWNV9X4okWL+sooSc15VsXfzdhn6x7gnqq6thtfyvQvgvuTHNm93pHAA88mgyTpZzOr4k/ymiS3Mn1wliRLk/zhrrapqn8Avpfkhd2iU4Fbga8CE92yCeCynya4JOmns2CW630c+CdMlzZVdWOSk2ex3TLgj5PsA9wB/BrTv2y+mOQc4G7gbc86tSTppzbb4qeqvpdk60WbZ7HNDcD4DD86dbbvK0navWZb/N9L8hqgutn7eXS7fSRJe5bZHtz9d8C7gcVMH7Q9oRtLkvYws5rxV9X3gXf0nEWSNAKzKv4kn5xh8Q+AyaryrBxJ2oPMdlfPvkzv3lnb/Xk5cBhwTpLf7ymbJKkHsz24OwacUlWbAJJ8CrgcOB24qadskqQezHbGvxjY+lu7BwBHVdVm4PHdnkqS1JvZzvj/K3BDkquAMH3VzQ93l3D4ek/ZJEk9mO1ZPZck+QvgncDtTO/muaeqfgj8Vo/5JEm72WzP6vl1YDlwNHAD8Grg28Ap/UWTJPVhtvv4lwOvAu6qql8CXsH0tfYlSXuY2Rb/j6vqxwBJnltVtwMv/AnbSJLmoNke3L0nySHAnwBXJHkIuK+/WJKkvsz24O6bu6cXJLkSOBhY1VsqSVJvZn1Z5qdU1Tf6CCJJGo0+77krSZqDLH5Jasyz3tXzbCS5E3iU6bt1baqq8SSHAV8AlgB3Av+8qh7qM4ck6RmjmPH/UlWdUFVP3YLxfcDqqjoeWN2NJUkj0uuMfyfOAl7fPV8JXAW8d4Ac0uAuuugi1q1bN3SMOeGpf4fly5cPnGRuGBsbY9myZb28dt/FX8DlSQq4uKpWAEdU1XqAqlqf5PCZNkxyLnAuwLHHHttzTGkY69atY+0t13PsgZuHjjK4fZ6c3gHx+F2TAycZ3t0b5/f6+n0X/2ur6r6u3K9IcvtsN+x+SawAGB8fr74CSkM79sDNvP/ER4aOoTnkw9cd1Ovr97qPv6ru6x4fAL4CnATcn+RIgO7xgT4zSJK21VvxJzkgyc899Rx4A3Az8FVgolttAvCevZI0Qn3u6jkC+EqSp97n/1TVqiR/C3wxyTnA3cDbeswAeABtax5Ae0afB8+kuay34q+qO4ClMyzfAJza1/vOZN26ddxw821s3v+wUb7tnDTvienDJWvuuH/gJMOa/9iDQ0eQBjPE6ZyD2Lz/YfzoRW8cOobmiP1u//OhI0iD8ZINktQYi1+SGmPxS1JjLH5JaozFL0mNsfglqTEWvyQ1xuKXpMZY/JLUGItfkhpj8UtSYyx+SWqMxS9JjbH4JakxFr8kNab34k8yP8n1Sf6sGx+X5Noka5N8Ick+fWeQJD1jFDP+5cBtW40/Cny8qo4HHgLOGUEGSVKn1+JPcjTwT4HPdOMApwCXdqusBM7uM4MkaVt9z/h/H/hPwJZuvBB4uKo2deN7gMUzbZjk3CSTSSanpqZ6jilJ7eit+JP8CvBAVa3ZevEMq9ZM21fViqoar6rxRYsW9ZJRklrU583WXwucmeSNwL7AQUz/D+CQJAu6Wf/RwH09ZgDg3nvvZf5jP/AG23ra/Mc2cO+9m37yitJeqLcZf1X9dlUdXVVLgLcDf1VV7wCuBN7arTYBXNZXBknSjvqc8e/Me4HPJ7kQuB64pO83XLx4Mf/w+AJ+9KI39v1W2kPsd/ufs3jxEUPHkAYxkuKvqquAq7rndwAnjeJ9pbnu3nvv5YePzufD1x00dBTNIXc9Op8D7r23t9f3m7uS1JghdvVI6ixevJjHN63n/Sc+MnQUzSEfvu4gnrt4xjPddwtn/JLUGItfkhpj8UtSYyx+SWqMxS9JjbH4JakxFr8kNcbil6TGWPyS1Jhmvrk7/7EHvSwzMO/H098Q3bJv29eGmf/Yg4AXaVObmij+sbGxoSPMGevWPQrA2PNbL70j/FyoWU0U/7Jly4aOMGcsX74cgE984hMDJ5E0FPfxS1JjLH5JaozFL0mN6W0ff5J9gf8LPLd7n0ur6vwkxwGfBw4DrgPeWVVP9JVDmuvu3ugduADuf2x6HnrE/lsGTjK8uzfO5/geX7/Pg7uPA6dU1cYkzwGuSfIXwH8APl5Vn0/yR8A5wKd6zCHNWZ5Z9Iwn1q0D4Lm/4L/J8fT72eit+KuqgI3d8DndnwJOAf5Vt3wlcAEWvxrlGWfP8Iyz0el1H3+S+UluAB4ArgC+CzxcVZu6Ve4BZry/WJJzk0wmmZyamuozpiQ1pdfir6rNVXUCcDRwEvDimVbbybYrqmq8qsYXLVrUZ0xJaspIzuqpqoeBq4BXA4ckeWoX09HAfaPIIEma1lvxJ1mU5JDu+X7AacBtwJXAW7vVJoDL+sogSdpRn2f1HAmsTDKf6V8wX6yqP0tyK/D5JBcC1wOX9JhBkrSdPs/q+TvgFTMsv4Pp/f2SpAH4zV1JaozFL0mNsfglqTEWvyQ1xuKXpMZY/JLUGItfkhpj8UtSYyx+SWqMxS9JjbH4JakxFr8kNcbil6TGWPyS1BiLX5IaY/FLUmMsfklqTJ/33D0myZVJbktyS5Ll3fLDklyRZG33eGhfGSRJO+pzxr8J+I9V9WLg1cC7k7wEeB+wuqqOB1Z3Y0nSiPRW/FW1vqqu654/CtwGLAbOAlZ2q60Ezu4rgyRpRyPZx59kCdM3Xr8WOKKq1sP0Lwfg8J1sc26SySSTU1NTo4gpSU3ovfiTHAh8CXhPVT0y2+2qakVVjVfV+KJFi/oLKEmN6bX4kzyH6dL/46r6crf4/iRHdj8/EnigzwySpG31eVZPgEuA26rqv2/1o68CE93zCeCyvjJIknaUqurnhZN/DFwN3ARs6Ra/n+n9/F8EjgXuBt5WVQ/u6rXGx8drcnKyl5yjctFFF7Fu3bqhYzydYWxsbNAcY2NjLFu2bNAMmuZnc1t702czyZqqGt9++YK+3rCqrgGykx+f2tf7atf222+/oSNIM/KzOTq9zfh3p71hxi9Jo7azGb+XbJCkxlj8ktQYi1+SGmPxS1JjLH5JaozFL0mNsfglqTEWvyQ1Zo/4AleSKeCuoXPsRZ4HfH/oENIM/GzuXr9QVTtc3niPKH7tXkkmZ/o2nzQ0P5uj4a4eSWqMxS9JjbH427Ri6ADSTvjZHAH38UtSY5zxS1JjLH5JaozFL0mNsfglqTEW/14syZIktyX5dJJbklyeZL8kJyT56yR/l+QrSQ4dOqvakOQ/J1m+1fi/JDkvyW8l+dvuM/k73c8OSPK1JDcmuTnJvxgu+d7F4t/7HQ/8QVX9IvAw8Bbgs8B7q+rlwE3A+QPmU1suASYAkswD3g7cz/Tn9CTgBOCVSU4GzgDuq6qlVfVSYNUwkfc+Fv/e7++r6obu+RrgBcAhVfWNbtlK4ORBkqk5VXUnsCHJK4A3ANcDr9rq+XXAi5j+RXATcFqSjyZ5XVX9YJjUe58FQwdQ7x7f6vlm4JChgkidzwC/Cvw88D+AU4Hfq6qLt18xySuBNwK/l+TyqvrdUQbdWznjb88PgIeSvK4bvxP4xi7Wl3a3rzC9G+dVwF92f/5NkgMBkixOcniSo4DHqup/Ax8DThwq8N7GGX+bJoA/SrI/cAfwawPnUUOq6okkVwIPV9Vm4PIkLwa+nQRgI/CvgTHgvyXZAjwJ/MZQmfc2XrJB0kh1B3WvA95WVWuHztMid/VIGpkkLwHWAast/eE445ekxjjjl6TGWPyS1BiLX5Ia4+mcalqShcDqbvjzTH/Jbaobn1RVT/TwnicCh1eVlyDQICx+Na2qNjB9fRiSXABsrKqPzXb7JPO7c9GfjRMBrz2jwbirR9qJJH+aZE13ZdNf75YtSPJwkguT/A1wUpIzk3wnydVJLkryJ926Byb5X0n+Jsn1Sd6UZD/gQ8A7ktyQ5K0D/hXVKGf80s5NVNWD3TecJ5N8CXgUOBi4rqo+2P3s/wGvBe4GvrjV9h8CVlXVr3aXvr4WeDnwu8BLq+o9o/zLSE9xxi/t3G8muRH4NnA001c2BXiC6evNALwE+E5V3VXTX4r53FbbvwH4QJIbgCuBfYFjR5Jc2gVn/NIMkpzG9OWqX11VP0pyDdPFDfCjeuabj9nVywBnV9V3t3ttL4OtQTnjl2Z2MPBgV/q/yPSVJGdyC/DCJMdk+gpjW98l6i+B854adNegh+ndRT/XQ2ZpVix+aWZfA/bvdvV8iOn98zuoqseAfw98HbgauI/pS18D/E73GjcluQW4oFv+V8DS7oCvB3c1cl6rR/oZJTmwqjZ2M/6LgZuq6qKhc0k744xf+tn9RncA91ZgP+DTA+eRdskZvyQ1xhm/JDXG4pekxlj8ktQYi1+SGmPxS1Jj/j8jbvKTsPZuLAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x='Target', y='age',data = df_bank)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 726,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1c4d434518>"
      ]
     },
     "execution_count": 726,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "target_y = df_bank.loc[df_bank['Target']== 'yes']\n",
    "target_n = df_bank.loc[df_bank['Target'] == 'no']\n",
    "sns.distplot(target_y['age'], label = 'yes')\n",
    "sns.distplot(target_n['age'], label = 'no')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There doesn't seem to be too much of a correlation between 'Age' and 'Target' variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 727,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.countplot(x='job', data = df_bank, hue='Target', orient ='h')\n",
    "ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\n",
    "plt.tight_layout()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 728,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c59955588>"
      ]
     },
     "execution_count": 728,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dxp.aggplot(agg = 'job', data = df_bank, hue='Target', normalize ='job', stacked = True,figsize = (10,4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "there is a potential correlation between 'job' and 'target' variable with students, retired and unemployed who have higher rate of taking on term deposits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 729,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c54b86828>"
      ]
     },
     "execution_count": 729,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = 'marital', data = df_bank, order=['single', 'married','divorced'], hue = 'Target')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 730,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = dxp.aggplot(agg = 'marital', data = df_bank, hue='Target', normalize ='marital', \n",
    "                  stacked = True, figsize = (6,4))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "doesn't seem like there is a correlation to target variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 731,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c76b1b438>"
      ]
     },
     "execution_count": 731,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='education', hue = 'Target', data=df_bank,order = ['primary','secondary','tertiary','unknown'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 732,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c59a2cf60>"
      ]
     },
     "execution_count": 732,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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W0866aT3JenYY499b/Xq1Xu9++67PUeNGrVFkiZMmPDmvHnz+nbm2IQUAKBLevfu/eHVhT179ox33nmnYNc7EFIAgIIqLy/f0b9//x2PPvpoX0m67bbbBp544olbOnMsQgoAUHB33HHHy1deeeWQ4cOHVy1evHjvG264oeXt9PLCJegAsAfZ3ZeMH3XUUdteeumlZc3rkydPfr15+YUXXljZ1eMzkwIAZBYhBQDILEIKAJBZhBQAILMIKQBAZhFSAIDMIqQAAJnF56QAYE8yqbygf6pDkzYV9U91EFIAgE779re/fdCgQYMar7322o2SdPHFF1ceeOCB27du3eqZM2fuv23bNo8aNeqdKVOmrN+8eXOP0aNHH/7aa6/1bmpq8hVXXLF+woQJb7d3fE73AQA67cILL3zjvvvuGyhJO3bs0EMPPbTfgQceuL2urq7P4sWLV6xYsWL5okWL9nnkkUf6Pvjgg/0HDx68fdWqVctfeumlZWeeeebmjo5PSAEAOu2oo47aNmDAgMa5c+fuPXPmzP7V1dXvzZ8/f98nn3yyf1VVVVV1dXXV6tWr+6xcubLPcccd9/5TTz3V/4ILLqh89NFH+w4cOHBHR8fndB8AoEvOO++8N6ZNmzZo48aNvc4777w358yZ0+/SSy997fLLL3+jZduFCxcuf+CBB8qvueaayjlz5my++eabX2vv2IQUAKBLzj333He+973vVTY2Nvqss85a06tXr5g0adJBEydOfKu8vLzp5Zdf7tW7d+/Yvn27DzjggMYLL7zwrX79+jXdddddAzs6NiEFAOiSPn36xEknnbR5wIABO8rKynTmmWduXrZsWZ/jjz/+45K0zz77NN17770vr1y5cq+rr756SI8ePVRWVha33nrrKx0dm5ACgD1JES4Z37FjhxYuXNh3xowZq5u3XXvttRubr/hrVl1dvfWss85avjPH5sIJAECnLViwoM+hhx56zGc/+9nNxxxzzNZCHz+vmZTtkZL+W1JPSdMi4oY22p0taYak4yOitmBVAgAyacSIER/U19cv2VXH73AmZbunpFsknS6pStI421WttOsn6RJJzxa6SABAacrndN8JkuoiYk1EbJN0v6QxrbT7rqQfSPqggPUBANrX1NTU5GIXUSjpa2lqXs8npColrctZr0+3fcj2sZIOjoiH2zuQ7Ym2a23XNjQ0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\n",
      "text/plain": [
       "<Figure size 360x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dxp.aggplot(agg = 'education', data = df_bank, hue='Target', normalize ='education', \n",
    "                  stacked = True, figsize = (5,3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "potential correlation - the more academic education you receive the more likelihood of taking term desposit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 733,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c769dde48>"
      ]
     },
     "execution_count": 733,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x= 'default', data= df_bank, order =['yes','no'], hue ='Target')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 734,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c769b1a20>"
      ]
     },
     "execution_count": 734,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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JWn27Nkfr169ekB35iakAADHpV+/fl9dXdinT5/Ys2dPwa53IKQAAAVVUVHRNmjQoLYVK1YMkKRHH310yGWXXba/O3MRUgCAgnv88ce3z5s3b/iYMWNq1q9ff+qDDz6Y+zi9vHAJOgD0Iif7kvGxY8ce3LJlS8Ph8cKFC/90ePudd97ZfLzzs5ICACSLkAIAJIuQAgAki5ACACSLkAIAJIuQAgAki5ACACSL+6QAoDdZUFHQn+rQgr1F/akOQgoA0G233377WZWVla3z58/fLUm33npr9ZlnnnnowIEDXrp06Z8dPHjQkydP3vPwww/v2LdvX9mUKVPO3blzZ7/29nbfddddO2bPnv3p0ebndB8AoNvmzp370TPPPDNEktra2vTSSy+dceaZZx5qamrqv379+k2bNm3a+Pbbb5/28ssvD3jxxRcHDRs27FBjY+PGLVu2NFx//fX7upqfkAIAdNvYsWMPDh48uPWNN944denSpYNqa2s/X7NmzemvvfbaoJqampra2tqarVu39t+8eXP/Sy655IvXX3990M0331y9YsWKAUOGDGnran5O9wEAjsusWbM+WrJkSeXu3bv7zpo16+NVq1YNvOOOO3beeeedH+XWrlu3buMLL7xQce+991avWrVq30MPPbTzaHMTUgCA43LDDTfsuf/++6tbW1s9bdq0bX379o0FCxacNWfOnE8qKirat2/f3rdfv35x6NAhDx06tHXu3LmfDBw4sP3JJ58c0tXchBQA4Lj0798/Jk6cuG/w4MFt5eXluv766/c1NDT0v/TSS8+XpNNOO6396aef3r558+ZT7rnnnuFlZWUqLy+PRx555I9dzU1IAUBvUoRLxtva2rRu3boBzz///NbD++bPn7/78BV/h9XW1h6YNm3axmOZmwsnAADdtnbt2v4jR4686Iorrth30UUXHSj0/HmtpGxPkvSvkvpIWhIRDx6h7ruSnpd0aUTUF6xLAECSxo8f/2Vzc/O7J2r+LldStvtIWiTpWkk1kmbYrumkbqCk2yT9odBNAgBKUz6n+yZIaoqIbRFxUNKzkqZ2UvcjST+V9GUB+wMAHF17e3u7i91EoWTeS/vhcT4hVS3pw6xxc2bfV2yPkzQiIv77aBPZnmO73nZ9S0tL/l0DAI5kQ0tLS0VvCKr29na3tLRUSNpweF8+30l19sbjq4N2maSH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\n",
      "text/plain": [
       "<Figure size 360x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dxp.aggplot(agg = 'default', data = df_bank, hue='Target', normalize ='default', \n",
    "                  stacked = True, figsize = (5,3) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "on multivariate analysis of 'default' and 'target' columns, potential exhibit of correlation between these variables. The non defaulters have higher correlation to taking term deposits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 735,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c769d30f0>"
      ]
     },
     "execution_count": 735,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(18,4))\n",
    "sns.boxplot(x='balance',y='Target', data = df_bank)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 736,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c1c6889b0>"
      ]
     },
     "execution_count": 736,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = 'loan', data = df_bank ,order=['yes','no'], hue = 'Target')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 737,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c1c6865f8>"
      ]
     },
     "execution_count": 737,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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l6TZs2d/vHr16gHdmZuQAgAcl379+n11d2GfPn1iz549BbvfgZACABRURUVF26BBg9pWrFgxQJIeffTRIZdddtn+7sxFSAEACu7xxx/fPm/evOFjxoypWb9+/akPPvhg7uP08sIt6ADQi5zsW8bHjh17cMuWLQ2HxwsXLvzT4e133nln8/HOz0oKAJAsQgoAkCxCCgCQLEIKAJAsQgoAkCxCCgCQLEIKAJAsvicFAL3JgoqC/lSHFuwt6k91EFIAgG67/fbbz6qsrGydP3/+bkm69dZbq88888xDBw4c8NKlS//s4MGDnjx58p6HH354x759+8qmTJly7s6dO/u1t7f7rrvu2jF79uxPjzY/l/sAAN02d+7cj5555pkhktTW1qaXXnrpjDPPPPNQU1NT//Xr12/atGnTxrfffvu0l19+ecCLL744aNiwYYcaGxs3btmypeH666/f19X8hBQAoNvGjh17cPDgwa1vvPHGqUuXLh1UW1v7+Zo1a05/7bXXBtXU1NTU1tbWbN26tf/mzZv7X3LJJV+8/vrrg26++ebqFStWDBgyZEhbV/NzuQ8AcFxmzZr10ZIlSyp3797dd9asWR+vWrVq4B133LHzzjvv/Ci3dt26dRtfeOGFinvvvbd61apV+x566KGdR5ubkAIAHJcbbrhhz/3331/d2trqadOmbevbt28sWLDgrDlz5nxSUVHRvn379r79+vWLQ4cOeejQoa1z5879ZODAge1PPvnkkK7mJqQAAMelf//+MXHixH2DBw9uKy8v1/XXX7+voaGh/6WXXnq+JJ122mntTz/99PbNmzefcs899wwvKytTeXl5PPLII3/sam5CCgB6kyLcMt7W1qZ169YNeP7557ce3jd//vzdh+/4O6y2tvbAtGnTNh7L3Nw4AQDotrVr1/YfOXLkRVdcccW+iy666ECh589rJWV7kqR/ldRH0pKIePAIdd+V9LykSyOivmBdAgCSNH78+C+bm5vfPVHzd7mSst1H0iJJ10qqkTTDdk0ndQMl3SbpD4VuEgBQmvK53DdBUlNEbIuIg5KelTS1k7ofSfqppC8L2B8A4Oja29vbXewmCiXzXtoPj/MJqWpJH2aNmzP7vmJ7nKQREfHfR5vI9hzb9bbrW1pa8u8aAHAkG1paWip6Q1C1t7e7paWlQtKGw/vy+UyqszceXx20yyQ9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\n",
      "text/plain": [
       "<Figure size 360x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dxp.aggplot(agg = 'loan', data = df_bank, hue='Target', normalize ='loan', \n",
    "                  stacked = True, figsize = (5,3) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "on multivariate analysis of 'default' and 'target' columns, potential exhibit of correlation between these variables. \n",
    "Those without loans have higher correlation to taking term deposits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 738,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c4e7a5128>"
      ]
     },
     "execution_count": 738,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = 'housing', data = df_bank, hue = 'Target')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 739,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c1c709a58>"
      ]
     },
     "execution_count": 739,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dxp.aggplot(agg = 'housing', data = df_bank, hue='Target', normalize ='housing', \n",
    "                  stacked = True, figsize = (5,3) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "on bivariate analysis of 'housing' and 'target' columns, potential exhibit of correlation between these variables. Those without housing loans have higher correlation to taking term deposits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 740,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,4))\n",
    "sns.countplot(x = 'day', data = df_bank, hue = 'Target')\n",
    "\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "this does not seem tto be a significan variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 741,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c1c5c7fd0>"
      ]
     },
     "execution_count": 741,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='poutcome', data=df_bank, hue ='Target')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 742,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c4e52fba8>"
      ]
     },
     "execution_count": 742,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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+PDhH7322mt7fPjhh2WjRo3aKEkTJ058Z/78+X060jchBQDolF69en1ydWFZWVm8//77RbvegZACABRVRUXF1r59+2598skn+0jSHXfc0f+EE07Y2JG+CCkAQNHddddday6//PLBw4YNq1qyZMmeN9xwQ8vb6RWES9ABYDeyqy8ZP+KIIza/+uqry5rXp06d+pfm5ZdeemllZ/tnJAUASBYhBQBIFiEFAEgWIQUASBYhBQBIFiEFAEgWIQUASBbvkwKA3cmUiqJ+VIemfNClH9VBSAEAOuyiiy46cMCAAY1XX331ekm64IILBu2///5bNm3a5BkzZuy3efNmjxo16v1bbrll7YYNG3qMHj36sLfeeqtXU1OTL7vssrUTJ058b3v9M90HAOiwyZMnv/3AAw/0l6StW7fqscce23f//fffUldX13vJkiUrVqxYsXzx4sV7PfHEE30effTRvgcccMCWVatWLX/11VeXnXnmmRva65+QAgB02BFHHLG5X79+jc8+++yeM2bM6FtdXf3RggUL9p47d27fqqqqqurq6qrXXnut98qVK3sfe+yxf5s3b17f733ve4OefPLJPv3799/aXv9M9wEAOmXChAlvT58+fcD69et7Tpgw4Z05c+bsc/HFF7916aWXvt2y7aJFi5b/+te/rrjqqqsGzZkzZ8PNN9/81vb6JqQAAJ3y7W9/+/3rrrtuUGNjo8eOHbu6Z8+eMWXKlAMnTZr0bkVFRdOaNWt69urVK7Zs2eKBAwc2Tp48+d199tmn6Z577unfXt+EFACgU3r37h0nnnjihn79+m0tLy/XmWeeuWHZsmW9jzvuuCMlaa+99mq677771qxcuXKPK6+8cnCPHj1UXl4et99++5/a65uQAoDdSRdcMr5161YtWrSoz8MPP/xa87arr756ffMVf82qq6s3jR07dvmO9M2FEwCADlu4cGHvQw455OiTTz55w9FHH72p2P0XNJKyPVLSTySVSZoeETe00e4sSQ9LOi4iaotWJQAgSSNGjPi4vr7+5Z3Vf7sjKdtlkm6TdLqkKknjbVe10m4fSRdKeqHYRQIASlMh033HS6qLiNURsVnSg5LGtNLuWkk/lvRxEesDAGxfU1NTk7u6iGLJjqWpeb2QkBok6c289fps2ydsD5d0UEQ8vr2ObE+yXWu7tqGhofCqAQBtWdrQ0FCx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\n",
      "text/plain": [
       "<Figure size 360x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dxp.aggplot(agg = 'poutcome', data = df_bank, hue='Target', normalize ='poutcome', \n",
    "                  stacked = True, figsize = (5,3) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "too many \"unknown\" values but there does seem like a correlation between successful previous campaign and taking up of a term deposit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 743,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "age int64\n",
      "job object\n",
      "marital object\n",
      "education object\n",
      "default object\n",
      "balance int64\n",
      "housing object\n",
      "loan object\n",
      "contact object\n",
      "day int64\n",
      "month object\n",
      "duration int64\n",
      "campaign int64\n",
      "pdays int64\n",
      "previous int64\n",
      "poutcome object\n",
      "Target object\n"
     ]
    }
   ],
   "source": [
    "for each in df_bank.columns:\n",
    "    print (each, df_bank[each].dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 744,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1c4e551f28>"
      ]
     },
     "execution_count": 744,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "target_y = df_bank.loc[df_bank['Target']== 'yes']\n",
    "target_n = df_bank.loc[df_bank['Target'] == 'no']\n",
    "sns.distplot(target_y['duration'], label = 'yes')\n",
    "sns.distplot(target_n['duration'], label = 'no')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "there seems to be a correlation between duration and Target variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 745,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1c4e6e3128>"
      ]
     },
     "execution_count": 745,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "campaign_y = df_bank.loc[df_bank['Target']== 'yes']\n",
    "campaign_n = df_bank.loc[df_bank['Target'] == 'no']\n",
    "sns.distplot(target_y['campaign'], label = 'yes', hist = True )\n",
    "sns.distplot(target_n['campaign'], label = 'no', hist= True)\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 746,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c787464a8>"
      ]
     },
     "execution_count": 746,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,3))\n",
    "sns.boxplot( x = 'campaign', data =  df_bank, y = 'Target', width = 0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "not to sure what to make between correlation of these two variables at this stage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 747,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>management</td>\n",
       "      <td>married</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>no</td>\n",
       "      <td>2143</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>261</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>44</td>\n",
       "      <td>technician</td>\n",
       "      <td>single</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>29</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>151</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>33</td>\n",
       "      <td>entrepreneur</td>\n",
       "      <td>married</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>2</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>76</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>47</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>married</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "      <td>1506</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>92</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>33</td>\n",
       "      <td>unknown</td>\n",
       "      <td>single</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "      <td>1</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>198</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>35</td>\n",
       "      <td>management</td>\n",
       "      <td>married</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>no</td>\n",
       "      <td>231</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>139</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>28</td>\n",
       "      <td>management</td>\n",
       "      <td>single</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>no</td>\n",
       "      <td>447</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>217</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>42</td>\n",
       "      <td>entrepreneur</td>\n",
       "      <td>divorced</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>yes</td>\n",
       "      <td>2</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>380</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>58</td>\n",
       "      <td>retired</td>\n",
       "      <td>married</td>\n",
       "      <td>primary</td>\n",
       "      <td>no</td>\n",
       "      <td>121</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>43</td>\n",
       "      <td>technician</td>\n",
       "      <td>single</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>593</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>55</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age           job   marital  education default  balance housing loan  \\\n",
       "0   58    management   married   tertiary      no     2143     yes   no   \n",
       "1   44    technician    single  secondary      no       29     yes   no   \n",
       "2   33  entrepreneur   married  secondary      no        2     yes  yes   \n",
       "3   47   blue-collar   married    unknown      no     1506     yes   no   \n",
       "4   33       unknown    single    unknown      no        1      no   no   \n",
       "5   35    management   married   tertiary      no      231     yes   no   \n",
       "6   28    management    single   tertiary      no      447     yes  yes   \n",
       "7   42  entrepreneur  divorced   tertiary     yes        2     yes   no   \n",
       "8   58       retired   married    primary      no      121     yes   no   \n",
       "9   43    technician    single  secondary      no      593     yes   no   \n",
       "\n",
       "   contact  day month  duration  campaign  pdays  previous poutcome Target  \n",
       "0  unknown    5   may       261         1     -1         0  unknown     no  \n",
       "1  unknown    5   may       151         1     -1         0  unknown     no  \n",
       "2  unknown    5   may        76         1     -1         0  unknown     no  \n",
       "3  unknown    5   may        92         1     -1         0  unknown     no  \n",
       "4  unknown    5   may       198         1     -1         0  unknown     no  \n",
       "5  unknown    5   may       139         1     -1         0  unknown     no  \n",
       "6  unknown    5   may       217         1     -1         0  unknown     no  \n",
       "7  unknown    5   may       380         1     -1         0  unknown     no  \n",
       "8  unknown    5   may        50         1     -1         0  unknown     no  \n",
       "9  unknown    5   may        55         1     -1         0  unknown     no  "
      ]
     },
     "execution_count": 747,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for feature in df_bank.columns: # Loop through all columns in the dataframe\n",
    "    if df_bank[feature].dtype == 'object': # Only apply for columns with categorical strings\n",
    "        df_bank[feature] = pd.Categorical(df_bank[feature])# Replace strings with an integer\n",
    "df_bank.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 748,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "blue-collar      9732\n",
      "management       9458\n",
      "technician       7597\n",
      "admin.           5171\n",
      "services         4154\n",
      "retired          2264\n",
      "self-employed    1579\n",
      "entrepreneur     1487\n",
      "unemployed       1303\n",
      "housemaid        1240\n",
      "student           938\n",
      "unknown           288\n",
      "Name: job, dtype: int64\n",
      "married     27214\n",
      "single      12790\n",
      "divorced     5207\n",
      "Name: marital, dtype: int64\n",
      "secondary    23202\n",
      "tertiary     13301\n",
      "primary       6851\n",
      "unknown       1857\n",
      "Name: education, dtype: int64\n",
      "cellular     29285\n",
      "unknown      13020\n",
      "telephone     2906\n",
      "Name: contact, dtype: int64\n",
      "unknown    36959\n",
      "failure     4901\n",
      "other       1840\n",
      "success     1511\n",
      "Name: poutcome, dtype: int64\n",
      "may    13766\n",
      "jul     6895\n",
      "aug     6247\n",
      "jun     5341\n",
      "nov     3970\n",
      "apr     2932\n",
      "feb     2649\n",
      "jan     1403\n",
      "oct      738\n",
      "sep      579\n",
      "mar      477\n",
      "dec      214\n",
      "Name: month, dtype: int64\n",
      "yes    25130\n",
      "no     20081\n",
      "Name: housing, dtype: int64\n",
      "-1      36954\n",
      " 182      167\n",
      " 92       147\n",
      " 183      126\n",
      " 91       126\n",
      "        ...  \n",
      " 749        1\n",
      " 717        1\n",
      " 589        1\n",
      " 493        1\n",
      " 32         1\n",
      "Name: pdays, Length: 559, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(df_bank.job.value_counts())\n",
    "print(df_bank.marital.value_counts())\n",
    "print(df_bank.education.value_counts())\n",
    "print(df_bank.contact.value_counts())\n",
    "print(df_bank.poutcome.value_counts())\n",
    "print(df_bank.month.value_counts())\n",
    "print(df_bank.housing.value_counts())\n",
    "print(df_bank.pdays.value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 749,
   "metadata": {},
   "outputs": [],
   "source": [
    "replaceStruct = {\n",
    "                \"education\":     {\"primary\": 1, \"secondary\": 2 ,\"tertiary\": 3 ,\"unknown\":-1},\n",
    "                \"month\": {\"jan\": 1, \"feb\":2 , \"mar\": 3, \"apr\": 4,\"may\": 5, \"jun\":6,\"jul\":7,\n",
    "                          \"aug\":8,\"sep\":9,\"oct\":10,\"nov\":11,\"dec\":12},\n",
    "                    }\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 750,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "labelEncodeCols = [\"default\", \"housing\", \"loan\", \"Target\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 751,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>management</td>\n",
       "      <td>married</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>0</td>\n",
       "      <td>2143</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>261</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>44</td>\n",
       "      <td>technician</td>\n",
       "      <td>single</td>\n",
       "      <td>secondary</td>\n",
       "      <td>0</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>151</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>33</td>\n",
       "      <td>entrepreneur</td>\n",
       "      <td>married</td>\n",
       "      <td>secondary</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>76</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>47</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>married</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>1506</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>92</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>33</td>\n",
       "      <td>unknown</td>\n",
       "      <td>single</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>198</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age           job  marital  education  default  balance  housing  loan  \\\n",
       "0   58    management  married   tertiary        0     2143        1     0   \n",
       "1   44    technician   single  secondary        0       29        1     0   \n",
       "2   33  entrepreneur  married  secondary        0        2        1     1   \n",
       "3   47   blue-collar  married    unknown        0     1506        1     0   \n",
       "4   33       unknown   single    unknown        0        1        0     0   \n",
       "\n",
       "   contact  day month  duration  campaign  pdays  previous poutcome  Target  \n",
       "0  unknown    5   may       261         1     -1         0  unknown       0  \n",
       "1  unknown    5   may       151         1     -1         0  unknown       0  \n",
       "2  unknown    5   may        76         1     -1         0  unknown       0  \n",
       "3  unknown    5   may        92         1     -1         0  unknown       0  \n",
       "4  unknown    5   may       198         1     -1         0  unknown       0  "
      ]
     },
     "execution_count": 751,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Letâ€™s encode variables that have yes/no variables using LabelEncoder.\n",
    "# import LabelEncoder \n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "# Instatniate LabelEncoder\n",
    "le = LabelEncoder()\n",
    "# LabelEncode Book_Tablecolumn of df\n",
    "for colname in labelEncodeCols:\n",
    "    df_bank[colname] = le.fit_transform(df_bank[colname])\n",
    "    # Inspecting encoded df\n",
    "df_bank.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 752,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_bank=df_bank.replace(replaceStruct)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 753,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>management</td>\n",
       "      <td>married</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2143</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>261</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>44</td>\n",
       "      <td>technician</td>\n",
       "      <td>single</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>151</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>33</td>\n",
       "      <td>entrepreneur</td>\n",
       "      <td>married</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>76</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>47</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>married</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>1506</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>92</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>33</td>\n",
       "      <td>unknown</td>\n",
       "      <td>single</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>198</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age           job  marital  education  default  balance  housing  loan  \\\n",
       "0   58    management  married          3        0     2143        1     0   \n",
       "1   44    technician   single          2        0       29        1     0   \n",
       "2   33  entrepreneur  married          2        0        2        1     1   \n",
       "3   47   blue-collar  married         -1        0     1506        1     0   \n",
       "4   33       unknown   single         -1        0        1        0     0   \n",
       "\n",
       "   contact  day  month  duration  campaign  pdays  previous poutcome  Target  \n",
       "0  unknown    5      5       261         1     -1         0  unknown       0  \n",
       "1  unknown    5      5       151         1     -1         0  unknown       0  \n",
       "2  unknown    5      5        76         1     -1         0  unknown       0  \n",
       "3  unknown    5      5        92         1     -1         0  unknown       0  \n",
       "4  unknown    5      5       198         1     -1         0  unknown       0  "
      ]
     },
     "execution_count": 753,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 754,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>27716</td>\n",
       "      <td>41</td>\n",
       "      <td>technician</td>\n",
       "      <td>married</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>telephone</td>\n",
       "      <td>4</td>\n",
       "      <td>12</td>\n",
       "      <td>43</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27717</td>\n",
       "      <td>38</td>\n",
       "      <td>management</td>\n",
       "      <td>divorced</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>cellular</td>\n",
       "      <td>4</td>\n",
       "      <td>12</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27718</td>\n",
       "      <td>50</td>\n",
       "      <td>technician</td>\n",
       "      <td>married</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>72</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>telephone</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27719</td>\n",
       "      <td>30</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>single</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>130</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>telephone</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "      <td>291</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27720</td>\n",
       "      <td>22</td>\n",
       "      <td>management</td>\n",
       "      <td>single</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>760</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>telephone</td>\n",
       "      <td>7</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>42586</td>\n",
       "      <td>30</td>\n",
       "      <td>management</td>\n",
       "      <td>single</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2907</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>cellular</td>\n",
       "      <td>30</td>\n",
       "      <td>12</td>\n",
       "      <td>146</td>\n",
       "      <td>2</td>\n",
       "      <td>218</td>\n",
       "      <td>1</td>\n",
       "      <td>failure</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>42587</td>\n",
       "      <td>46</td>\n",
       "      <td>management</td>\n",
       "      <td>divorced</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>461</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>cellular</td>\n",
       "      <td>30</td>\n",
       "      <td>12</td>\n",
       "      <td>369</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>42588</td>\n",
       "      <td>30</td>\n",
       "      <td>housemaid</td>\n",
       "      <td>single</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>3185</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>cellular</td>\n",
       "      <td>30</td>\n",
       "      <td>12</td>\n",
       "      <td>158</td>\n",
       "      <td>3</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>42589</td>\n",
       "      <td>40</td>\n",
       "      <td>admin.</td>\n",
       "      <td>married</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3126</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>cellular</td>\n",
       "      <td>30</td>\n",
       "      <td>12</td>\n",
       "      <td>110</td>\n",
       "      <td>3</td>\n",
       "      <td>232</td>\n",
       "      <td>2</td>\n",
       "      <td>failure</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>42590</td>\n",
       "      <td>32</td>\n",
       "      <td>technician</td>\n",
       "      <td>married</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>14533</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>cellular</td>\n",
       "      <td>31</td>\n",
       "      <td>12</td>\n",
       "      <td>646</td>\n",
       "      <td>3</td>\n",
       "      <td>198</td>\n",
       "      <td>2</td>\n",
       "      <td>success</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>214 rows Ã— 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       age          job   marital  education  default  balance  housing  loan  \\\n",
       "27716   41   technician   married          2        0        0        1     0   \n",
       "27717   38   management  divorced          3        0        0        1     1   \n",
       "27718   50   technician   married          3        0       72        0     0   \n",
       "27719   30  blue-collar    single          2        0      130        0     0   \n",
       "27720   22   management    single          3        0      760        0     0   \n",
       "...    ...          ...       ...        ...      ...      ...      ...   ...   \n",
       "42586   30   management    single          3        0     2907        1     0   \n",
       "42587   46   management  divorced          3        0      461        0     0   \n",
       "42588   30    housemaid    single          3        0     3185        1     0   \n",
       "42589   40       admin.   married          2        0     3126        1     0   \n",
       "42590   32   technician   married         -1        0    14533        0     0   \n",
       "\n",
       "         contact  day  month  duration  campaign  pdays  previous poutcome  \\\n",
       "27716  telephone    4     12        43         1     -1         0  unknown   \n",
       "27717   cellular    4     12        18         1     -1         0  unknown   \n",
       "27718  telephone    5     12        12         1     -1         0  unknown   \n",
       "27719  telephone    5     12       291         1     -1         0  unknown   \n",
       "27720  telephone    7     12         6         1     -1         0  unknown   \n",
       "...          ...  ...    ...       ...       ...    ...       ...      ...   \n",
       "42586   cellular   30     12       146         2    218         1  failure   \n",
       "42587   cellular   30     12       369         2     -1         0  unknown   \n",
       "42588   cellular   30     12       158         3     -1         0  unknown   \n",
       "42589   cellular   30     12       110         3    232         2  failure   \n",
       "42590   cellular   31     12       646         3    198         2  success   \n",
       "\n",
       "       Target  \n",
       "27716       0  \n",
       "27717       0  \n",
       "27718       0  \n",
       "27719       0  \n",
       "27720       0  \n",
       "...       ...  \n",
       "42586       0  \n",
       "42587       1  \n",
       "42588       0  \n",
       "42589       0  \n",
       "42590       0  \n",
       "\n",
       "[214 rows x 17 columns]"
      ]
     },
     "execution_count": 754,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.loc[df_bank['month'] == 12]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 755,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>42590</td>\n",
       "      <td>32</td>\n",
       "      <td>technician</td>\n",
       "      <td>married</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>14533</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>cellular</td>\n",
       "      <td>31</td>\n",
       "      <td>12</td>\n",
       "      <td>646</td>\n",
       "      <td>3</td>\n",
       "      <td>198</td>\n",
       "      <td>2</td>\n",
       "      <td>success</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>42591</td>\n",
       "      <td>38</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>married</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>863</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>78</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       age          job  marital  education  default  balance  housing  loan  \\\n",
       "42590   32   technician  married         -1        0    14533        0     0   \n",
       "42591   38  blue-collar  married          2        0      863        0     0   \n",
       "\n",
       "        contact  day  month  duration  campaign  pdays  previous poutcome  \\\n",
       "42590  cellular   31     12       646         3    198         2  success   \n",
       "42591   unknown    6      1        78         1     -1         0  unknown   \n",
       "\n",
       "       Target  \n",
       "42590       0  \n",
       "42591       0  "
      ]
     },
     "execution_count": 755,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.iloc[42590:42592]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 756,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>27720</td>\n",
       "      <td>22</td>\n",
       "      <td>management</td>\n",
       "      <td>single</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>760</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>telephone</td>\n",
       "      <td>7</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27721</td>\n",
       "      <td>39</td>\n",
       "      <td>technician</td>\n",
       "      <td>married</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>616</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>telephone</td>\n",
       "      <td>8</td>\n",
       "      <td>12</td>\n",
       "      <td>170</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27722</td>\n",
       "      <td>32</td>\n",
       "      <td>management</td>\n",
       "      <td>single</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2223</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27723</td>\n",
       "      <td>34</td>\n",
       "      <td>services</td>\n",
       "      <td>married</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1442</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>cellular</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>234</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27724</td>\n",
       "      <td>55</td>\n",
       "      <td>retired</td>\n",
       "      <td>divorced</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>366</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>telephone</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>173</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27725</td>\n",
       "      <td>38</td>\n",
       "      <td>management</td>\n",
       "      <td>married</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>telephone</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>136</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27726</td>\n",
       "      <td>32</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>single</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>232</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>13</td>\n",
       "      <td>12</td>\n",
       "      <td>232</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27727</td>\n",
       "      <td>53</td>\n",
       "      <td>management</td>\n",
       "      <td>divorced</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1004</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>telephone</td>\n",
       "      <td>22</td>\n",
       "      <td>12</td>\n",
       "      <td>119</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27728</td>\n",
       "      <td>28</td>\n",
       "      <td>admin.</td>\n",
       "      <td>single</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>6100</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>27</td>\n",
       "      <td>12</td>\n",
       "      <td>333</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27729</td>\n",
       "      <td>59</td>\n",
       "      <td>management</td>\n",
       "      <td>married</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2143</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>cellular</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>1</td>\n",
       "      <td>268</td>\n",
       "      <td>1</td>\n",
       "      <td>failure</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27730</td>\n",
       "      <td>40</td>\n",
       "      <td>management</td>\n",
       "      <td>married</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>378</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>cellular</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>260</td>\n",
       "      <td>1</td>\n",
       "      <td>268</td>\n",
       "      <td>2</td>\n",
       "      <td>failure</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27731</td>\n",
       "      <td>28</td>\n",
       "      <td>admin.</td>\n",
       "      <td>married</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>654</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>cellular</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>198</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27732</td>\n",
       "      <td>46</td>\n",
       "      <td>technician</td>\n",
       "      <td>married</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>cellular</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>58</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27733</td>\n",
       "      <td>54</td>\n",
       "      <td>technician</td>\n",
       "      <td>married</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1076</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>cellular</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>338</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27734</td>\n",
       "      <td>53</td>\n",
       "      <td>unknown</td>\n",
       "      <td>married</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>telephone</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>69</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       age          job   marital  education  default  balance  housing  loan  \\\n",
       "27720   22   management    single          3        0      760        0     0   \n",
       "27721   39   technician   married          2        0      616        0     0   \n",
       "27722   32   management    single          3        0     2223        0     0   \n",
       "27723   34     services   married          3        0     1442        0     0   \n",
       "27724   55      retired  divorced          2        0      366        0     0   \n",
       "27725   38   management   married          3        0        0        1     0   \n",
       "27726   32  blue-collar    single          2        0      232        0     0   \n",
       "27727   53   management  divorced          2        0     1004        0     1   \n",
       "27728   28       admin.    single          2        0     6100        0     0   \n",
       "27729   59   management   married          3        0     2143        1     0   \n",
       "27730   40   management   married          3        0      378        1     1   \n",
       "27731   28       admin.   married          3        0      654        0     0   \n",
       "27732   46   technician   married          3        0        0        1     0   \n",
       "27733   54   technician   married          2        0     1076        0     0   \n",
       "27734   53      unknown   married         -1        0       13        0     0   \n",
       "\n",
       "         contact  day  month  duration  campaign  pdays  previous poutcome  \\\n",
       "27720  telephone    7     12         6         1     -1         0  unknown   \n",
       "27721  telephone    8     12       170         1     -1         0  unknown   \n",
       "27722    unknown    9     12        10         1     -1         0  unknown   \n",
       "27723   cellular   11     12       234         1     -1         0  unknown   \n",
       "27724  telephone   11     12       173         1     -1         0  unknown   \n",
       "27725  telephone   12     12       136         1     -1         0  unknown   \n",
       "27726    unknown   13     12       232         1     -1         0  unknown   \n",
       "27727  telephone   22     12       119         1     -1         0  unknown   \n",
       "27728    unknown   27     12       333         1     -1         0  unknown   \n",
       "27729   cellular   28      1        59         1    268         1  failure   \n",
       "27730   cellular   28      1       260         1    268         2  failure   \n",
       "27731   cellular   28      1       198         1     -1         0  unknown   \n",
       "27732   cellular   28      1        58         1     -1         0  unknown   \n",
       "27733   cellular   28      1       338         1     -1         0  unknown   \n",
       "27734  telephone   28      1        69         1     -1         0  unknown   \n",
       "\n",
       "       Target  \n",
       "27720       0  \n",
       "27721       0  \n",
       "27722       0  \n",
       "27723       0  \n",
       "27724       0  \n",
       "27725       0  \n",
       "27726       0  \n",
       "27727       1  \n",
       "27728       0  \n",
       "27729       0  \n",
       "27730       0  \n",
       "27731       0  \n",
       "27732       0  \n",
       "27733       0  \n",
       "27734       0  "
      ]
     },
     "execution_count": 756,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.iloc[27720:27735]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "row index <= 27728 is year 2008\n",
    "row index >= 27729 and <=42590 is 2009\n",
    "row index >=42591 is year 2010"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 757,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "27728"
      ]
     },
     "execution_count": 757,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rowIndex = df_bank.index[27728]\n",
    "rowIndex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 758,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_bank.loc[0:rowIndex, 'year'] = 2008"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 759,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_bank.loc[27729:42590, 'year'] = 2009"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 760,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_bank.loc[42591:, 'year'] = 2010"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 761,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>Target</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>42590</td>\n",
       "      <td>32</td>\n",
       "      <td>technician</td>\n",
       "      <td>married</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>14533</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>cellular</td>\n",
       "      <td>31</td>\n",
       "      <td>12</td>\n",
       "      <td>646</td>\n",
       "      <td>3</td>\n",
       "      <td>198</td>\n",
       "      <td>2</td>\n",
       "      <td>success</td>\n",
       "      <td>0</td>\n",
       "      <td>2009.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>42591</td>\n",
       "      <td>38</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>married</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>863</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>78</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>2010.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       age          job  marital  education  default  balance  housing  loan  \\\n",
       "42590   32   technician  married         -1        0    14533        0     0   \n",
       "42591   38  blue-collar  married          2        0      863        0     0   \n",
       "\n",
       "        contact  day  month  duration  campaign  pdays  previous poutcome  \\\n",
       "42590  cellular   31     12       646         3    198         2  success   \n",
       "42591   unknown    6      1        78         1     -1         0  unknown   \n",
       "\n",
       "       Target    year  \n",
       "42590       0  2009.0  \n",
       "42591       0  2010.0  "
      ]
     },
     "execution_count": 761,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.iloc[42590:42592]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 762,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_bank['date'] = pd.to_datetime(df_bank[['year','month','day']])\n",
    "df_bank['day_of_week'] = df_bank['date'].dt.day_name()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 763,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>Target</th>\n",
       "      <th>year</th>\n",
       "      <th>date</th>\n",
       "      <th>day_of_week</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>management</td>\n",
       "      <td>married</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2143</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>261</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>2008-05-05</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>44</td>\n",
       "      <td>technician</td>\n",
       "      <td>single</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>151</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>2008-05-05</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>33</td>\n",
       "      <td>entrepreneur</td>\n",
       "      <td>married</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>76</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>2008-05-05</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>47</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>married</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>1506</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>92</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>2008-05-05</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>33</td>\n",
       "      <td>unknown</td>\n",
       "      <td>single</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>198</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>2008-05-05</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age           job  marital  education  default  balance  housing  loan  \\\n",
       "0   58    management  married          3        0     2143        1     0   \n",
       "1   44    technician   single          2        0       29        1     0   \n",
       "2   33  entrepreneur  married          2        0        2        1     1   \n",
       "3   47   blue-collar  married         -1        0     1506        1     0   \n",
       "4   33       unknown   single         -1        0        1        0     0   \n",
       "\n",
       "   contact  day  month  duration  campaign  pdays  previous poutcome  Target  \\\n",
       "0  unknown    5      5       261         1     -1         0  unknown       0   \n",
       "1  unknown    5      5       151         1     -1         0  unknown       0   \n",
       "2  unknown    5      5        76         1     -1         0  unknown       0   \n",
       "3  unknown    5      5        92         1     -1         0  unknown       0   \n",
       "4  unknown    5      5       198         1     -1         0  unknown       0   \n",
       "\n",
       "     year       date day_of_week  \n",
       "0  2008.0 2008-05-05      Monday  \n",
       "1  2008.0 2008-05-05      Monday  \n",
       "2  2008.0 2008-05-05      Monday  \n",
       "3  2008.0 2008-05-05      Monday  \n",
       "4  2008.0 2008-05-05      Monday  "
      ]
     },
     "execution_count": 763,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 764,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Thursday     9754\n",
       "Monday       9522\n",
       "Wednesday    8914\n",
       "Friday       8707\n",
       "Tuesday      8264\n",
       "Saturday       30\n",
       "Sunday         20\n",
       "Name: day_of_week, dtype: int64"
      ]
     },
     "execution_count": 764,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.day_of_week.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 765,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>Target</th>\n",
       "      <th>date</th>\n",
       "      <th>day_of_week</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>management</td>\n",
       "      <td>married</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2143</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>261</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>2008-05-05</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>44</td>\n",
       "      <td>technician</td>\n",
       "      <td>single</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>151</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>2008-05-05</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>33</td>\n",
       "      <td>entrepreneur</td>\n",
       "      <td>married</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>unknown</td>\n",
       "      <td>76</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>2008-05-05</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>47</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>married</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>1506</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>92</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>2008-05-05</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>33</td>\n",
       "      <td>unknown</td>\n",
       "      <td>single</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>198</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>2008-05-05</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>45206</td>\n",
       "      <td>51</td>\n",
       "      <td>technician</td>\n",
       "      <td>married</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>825</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>cellular</td>\n",
       "      <td>977</td>\n",
       "      <td>3</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>1</td>\n",
       "      <td>2010-11-17</td>\n",
       "      <td>Wednesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>45207</td>\n",
       "      <td>71</td>\n",
       "      <td>retired</td>\n",
       "      <td>divorced</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1729</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>cellular</td>\n",
       "      <td>456</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>1</td>\n",
       "      <td>2010-11-17</td>\n",
       "      <td>Wednesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>45208</td>\n",
       "      <td>72</td>\n",
       "      <td>retired</td>\n",
       "      <td>married</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5715</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>cellular</td>\n",
       "      <td>1127</td>\n",
       "      <td>5</td>\n",
       "      <td>184</td>\n",
       "      <td>3</td>\n",
       "      <td>success</td>\n",
       "      <td>1</td>\n",
       "      <td>2010-11-17</td>\n",
       "      <td>Wednesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>45209</td>\n",
       "      <td>57</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>married</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>668</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>telephone</td>\n",
       "      <td>508</td>\n",
       "      <td>4</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>2010-11-17</td>\n",
       "      <td>Wednesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>45210</td>\n",
       "      <td>37</td>\n",
       "      <td>entrepreneur</td>\n",
       "      <td>married</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2971</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>cellular</td>\n",
       "      <td>361</td>\n",
       "      <td>2</td>\n",
       "      <td>188</td>\n",
       "      <td>11</td>\n",
       "      <td>other</td>\n",
       "      <td>0</td>\n",
       "      <td>2010-11-17</td>\n",
       "      <td>Wednesday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>45211 rows Ã— 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       age           job   marital  education  default  balance  housing  \\\n",
       "0       58    management   married          3        0     2143        1   \n",
       "1       44    technician    single          2        0       29        1   \n",
       "2       33  entrepreneur   married          2        0        2        1   \n",
       "3       47   blue-collar   married         -1        0     1506        1   \n",
       "4       33       unknown    single         -1        0        1        0   \n",
       "...    ...           ...       ...        ...      ...      ...      ...   \n",
       "45206   51    technician   married          3        0      825        0   \n",
       "45207   71       retired  divorced          1        0     1729        0   \n",
       "45208   72       retired   married          2        0     5715        0   \n",
       "45209   57   blue-collar   married          2        0      668        0   \n",
       "45210   37  entrepreneur   married          2        0     2971        0   \n",
       "\n",
       "       loan    contact  duration  campaign  pdays  previous poutcome  Target  \\\n",
       "0         0    unknown       261         1     -1         0  unknown       0   \n",
       "1         0    unknown       151         1     -1         0  unknown       0   \n",
       "2         1    unknown        76         1     -1         0  unknown       0   \n",
       "3         0    unknown        92         1     -1         0  unknown       0   \n",
       "4         0    unknown       198         1     -1         0  unknown       0   \n",
       "...     ...        ...       ...       ...    ...       ...      ...     ...   \n",
       "45206     0   cellular       977         3     -1         0  unknown       1   \n",
       "45207     0   cellular       456         2     -1         0  unknown       1   \n",
       "45208     0   cellular      1127         5    184         3  success       1   \n",
       "45209     0  telephone       508         4     -1         0  unknown       0   \n",
       "45210     0   cellular       361         2    188        11    other       0   \n",
       "\n",
       "            date day_of_week  \n",
       "0     2008-05-05      Monday  \n",
       "1     2008-05-05      Monday  \n",
       "2     2008-05-05      Monday  \n",
       "3     2008-05-05      Monday  \n",
       "4     2008-05-05      Monday  \n",
       "...          ...         ...  \n",
       "45206 2010-11-17   Wednesday  \n",
       "45207 2010-11-17   Wednesday  \n",
       "45208 2010-11-17   Wednesday  \n",
       "45209 2010-11-17   Wednesday  \n",
       "45210 2010-11-17   Wednesday  \n",
       "\n",
       "[45211 rows x 17 columns]"
      ]
     },
     "execution_count": 765,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.drop(['day','month','year'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 766,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "target_y = df_bank.loc[df_bank['Target']== 1]\n",
    "target_n = df_bank.loc[df_bank['Target'] == 0]\n",
    "\n",
    "dxp.aggplot(agg = 'day_of_week', data = df_bank, hue='Target', normalize ='day_of_week', \n",
    "                  stacked = True, figsize = (8,4),\n",
    "            sort =True )\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Do not see any particular correlation between Day of Week and the Target variable, even though there seems to be a noticable correlation between Sunday and the Target variable, this Sunday is a small proportion of the whole count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 767,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1150ad550>"
      ]
     },
     "execution_count": 767,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "target_y = df_bank.loc[df_bank['Target']== 1]\n",
    "target_n = df_bank.loc[df_bank['Target'] == 0]\n",
    "sns.distplot(target_y['pdays'], label = 'yes',bins = [-1,30,60,90,120,1000])\n",
    "sns.distplot(target_n['pdays'], label = 'no', bins = [-1,30,60,90,120,1000])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 768,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c77a98fd0>"
      ]
     },
     "execution_count": 768,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(x='Target',y='pdays',data = df_bank)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "there isn't much correlation between pdays and Target variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 769,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['age',\n",
       " 'job',\n",
       " 'marital',\n",
       " 'education',\n",
       " 'default',\n",
       " 'balance',\n",
       " 'housing',\n",
       " 'loan',\n",
       " 'contact',\n",
       " 'day',\n",
       " 'month',\n",
       " 'duration',\n",
       " 'campaign',\n",
       " 'pdays',\n",
       " 'previous',\n",
       " 'poutcome',\n",
       " 'Target',\n",
       " 'year',\n",
       " 'date',\n",
       " 'day_of_week']"
      ]
     },
     "execution_count": 769,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.columns.to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 770,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x1151408d0>"
      ]
     },
     "execution_count": 770,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x1800 with 110 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.pairplot(data=df_bank,\n",
    "                  vars=['age', 'default', 'balance', 'housing', 'loan',\n",
    "                        'duration', 'campaign', 'pdays', 'previous', 'Target'], kind = 'reg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 771,
   "metadata": {},
   "outputs": [],
   "source": [
    "del df_bank['day']\n",
    "del df_bank['month']\n",
    "del df_bank['year']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 772,
   "metadata": {},
   "outputs": [],
   "source": [
    "replaceStruct = {\n",
    "                \"day_of_week\": {\"Saturday\": 1, \"Sunday\":2 , \"Monday\": 3, \"Tuesday\": 4,\"Wednesday\": 5, \n",
    "                          \"Thursday\":6,\"Friday\":7},\n",
    "                    }\n",
    "df_bank=df_bank.replace(replaceStruct)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 773,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c7f8d79e8>"
      ]
     },
     "execution_count": 773,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,8))\n",
    "sns.heatmap(df_bank.corr(),\n",
    "            annot=True,\n",
    "            linewidths=0.5,\n",
    "            center=0,\n",
    "            cbar=True,\n",
    "            cmap=\"YlGnBu\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "duration, housing seem to have some material correlations. others are not very correlated to Target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 774,
   "metadata": {},
   "outputs": [],
   "source": [
    "oneHotCols=[\"job\",\"marital\",\"contact\",\"poutcome\"]\n",
    "df_bank=pd.get_dummies(df_bank, columns=oneHotCols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 775,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age                  0.025155\n",
       "education            0.041634\n",
       "default             -0.022419\n",
       "balance              0.052838\n",
       "housing             -0.139173\n",
       "loan                -0.068185\n",
       "duration             0.394521\n",
       "campaign            -0.073172\n",
       "pdays                0.103621\n",
       "previous             0.093236\n",
       "Target               1.000000\n",
       "day_of_week          0.012447\n",
       "job_admin.           0.005637\n",
       "job_blue-collar     -0.072083\n",
       "job_entrepreneur    -0.019662\n",
       "job_housemaid       -0.015195\n",
       "job_management       0.032919\n",
       "job_retired          0.079245\n",
       "job_self-employed    0.000855\n",
       "job_services        -0.027864\n",
       "job_student          0.076897\n",
       "job_technician      -0.008970\n",
       "job_unemployed       0.020390\n",
       "job_unknown          0.000267\n",
       "marital_divorced     0.002772\n",
       "marital_married     -0.060260\n",
       "marital_single       0.063526\n",
       "contact_cellular     0.135873\n",
       "contact_telephone    0.014042\n",
       "contact_unknown     -0.150935\n",
       "poutcome_failure     0.009885\n",
       "poutcome_other       0.031955\n",
       "poutcome_success     0.306788\n",
       "poutcome_unknown    -0.167051\n",
       "Name: Target, dtype: float64"
      ]
     },
     "execution_count": 775,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.head()\n",
    "df_bank.corr()['Target']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1.3 Strategies to address the different data challenges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are no missing or NAN values. There are a lot of unknown values and because there are so much we could potentially drop the whole column.\n",
    "For columns where there are only a small proportion of unknown values, we can just leave it as is. For categorical, ordinal variables, the unknown values can be given a -1.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 776,
   "metadata": {},
   "outputs": [],
   "source": [
    "list = ['contact_cellular','contact_telephone', 'contact_unknown','poutcome_failure', 'poutcome_other',\n",
    "       'poutcome_success','poutcome_unknown']\n",
    "for each in list:\n",
    "    del df_bank[each]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 777,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>...</th>\n",
       "      <th>job_retired</th>\n",
       "      <th>job_self-employed</th>\n",
       "      <th>job_services</th>\n",
       "      <th>job_student</th>\n",
       "      <th>job_technician</th>\n",
       "      <th>job_unemployed</th>\n",
       "      <th>job_unknown</th>\n",
       "      <th>marital_divorced</th>\n",
       "      <th>marital_married</th>\n",
       "      <th>marital_single</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2143</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>261</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>44</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>151</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>33</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>76</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>47</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>1506</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>92</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>33</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>198</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  education  default  balance  housing  loan  duration  campaign  pdays  \\\n",
       "0   58          3        0     2143        1     0       261         1     -1   \n",
       "1   44          2        0       29        1     0       151         1     -1   \n",
       "2   33          2        0        2        1     1        76         1     -1   \n",
       "3   47         -1        0     1506        1     0        92         1     -1   \n",
       "4   33         -1        0        1        0     0       198         1     -1   \n",
       "\n",
       "   previous  ...  job_retired job_self-employed  job_services  job_student  \\\n",
       "0         0  ...            0                 0             0            0   \n",
       "1         0  ...            0                 0             0            0   \n",
       "2         0  ...            0                 0             0            0   \n",
       "3         0  ...            0                 0             0            0   \n",
       "4         0  ...            0                 0             0            0   \n",
       "\n",
       "   job_technician  job_unemployed  job_unknown  marital_divorced  \\\n",
       "0               0               0            0                 0   \n",
       "1               1               0            0                 0   \n",
       "2               0               0            0                 0   \n",
       "3               0               0            0                 0   \n",
       "4               0               0            1                 0   \n",
       "\n",
       "   marital_married  marital_single  \n",
       "0                1               0  \n",
       "1                0               1  \n",
       "2                1               0  \n",
       "3                1               0  \n",
       "4                0               1  \n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 777,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 778,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['age', 'education', 'default', 'balance', 'housing', 'loan', 'duration',\n",
       "       'campaign', 'pdays', 'previous', 'Target', 'date', 'day_of_week',\n",
       "       'job_admin.', 'job_blue-collar', 'job_entrepreneur', 'job_housemaid',\n",
       "       'job_management', 'job_retired', 'job_self-employed', 'job_services',\n",
       "       'job_student', 'job_technician', 'job_unemployed', 'job_unknown',\n",
       "       'marital_divorced', 'marital_married', 'marital_single'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 778,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.1 Load data into dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 779,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>...</th>\n",
       "      <th>job_retired</th>\n",
       "      <th>job_self-employed</th>\n",
       "      <th>job_services</th>\n",
       "      <th>job_student</th>\n",
       "      <th>job_technician</th>\n",
       "      <th>job_unemployed</th>\n",
       "      <th>job_unknown</th>\n",
       "      <th>marital_divorced</th>\n",
       "      <th>marital_married</th>\n",
       "      <th>marital_single</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2143</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>261</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>44</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>151</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>33</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>76</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>47</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>1506</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>92</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>33</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>198</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  education  default  balance  housing  loan  duration  campaign  pdays  \\\n",
       "0   58          3        0     2143        1     0       261         1     -1   \n",
       "1   44          2        0       29        1     0       151         1     -1   \n",
       "2   33          2        0        2        1     1        76         1     -1   \n",
       "3   47         -1        0     1506        1     0        92         1     -1   \n",
       "4   33         -1        0        1        0     0       198         1     -1   \n",
       "\n",
       "   previous  ...  job_retired job_self-employed  job_services  job_student  \\\n",
       "0         0  ...            0                 0             0            0   \n",
       "1         0  ...            0                 0             0            0   \n",
       "2         0  ...            0                 0             0            0   \n",
       "3         0  ...            0                 0             0            0   \n",
       "4         0  ...            0                 0             0            0   \n",
       "\n",
       "   job_technician  job_unemployed  job_unknown  marital_divorced  \\\n",
       "0               0               0            0                 0   \n",
       "1               1               0            0                 0   \n",
       "2               0               0            0                 0   \n",
       "3               0               0            0                 0   \n",
       "4               0               0            1                 0   \n",
       "\n",
       "   marital_married  marital_single  \n",
       "0                1               0  \n",
       "1                0               1  \n",
       "2                1               0  \n",
       "3                1               0  \n",
       "4                0               1  \n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 779,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 780,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(45211, 28)"
      ]
     },
     "execution_count": 780,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 781,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['age', 'education', 'default', 'balance', 'housing', 'loan', 'duration',\n",
       "       'campaign', 'pdays', 'previous', 'Target', 'date', 'day_of_week',\n",
       "       'job_admin.', 'job_blue-collar', 'job_entrepreneur', 'job_housemaid',\n",
       "       'job_management', 'job_retired', 'job_self-employed', 'job_services',\n",
       "       'job_student', 'job_technician', 'job_unemployed', 'job_unknown',\n",
       "       'marital_divorced', 'marital_married', 'marital_single'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 781,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 782,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>age</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>40.936210</td>\n",
       "      <td>10.618762</td>\n",
       "      <td>18.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>95.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>education</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>2.019442</td>\n",
       "      <td>0.902795</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>default</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.018027</td>\n",
       "      <td>0.133049</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>balance</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>1362.272058</td>\n",
       "      <td>3044.765829</td>\n",
       "      <td>-8019.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>448.0</td>\n",
       "      <td>1428.0</td>\n",
       "      <td>102127.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>housing</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.555838</td>\n",
       "      <td>0.496878</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>loan</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.160226</td>\n",
       "      <td>0.366820</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>duration</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>258.163080</td>\n",
       "      <td>257.527812</td>\n",
       "      <td>0.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>319.0</td>\n",
       "      <td>4918.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>campaign</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>2.763841</td>\n",
       "      <td>3.098021</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>63.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>pdays</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>40.197828</td>\n",
       "      <td>100.128746</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>871.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>previous</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.580323</td>\n",
       "      <td>2.303441</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>275.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Target</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.116985</td>\n",
       "      <td>0.321406</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>day_of_week</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>4.992922</td>\n",
       "      <td>1.423347</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>job_admin.</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.114375</td>\n",
       "      <td>0.318269</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>job_blue-collar</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.215257</td>\n",
       "      <td>0.411005</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>job_entrepreneur</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.032890</td>\n",
       "      <td>0.178351</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>job_housemaid</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.027427</td>\n",
       "      <td>0.163326</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>job_management</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.209197</td>\n",
       "      <td>0.406740</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>job_retired</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.050076</td>\n",
       "      <td>0.218105</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>job_self-employed</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.034925</td>\n",
       "      <td>0.183592</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>job_services</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.091880</td>\n",
       "      <td>0.288860</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>job_student</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.020747</td>\n",
       "      <td>0.142538</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>job_technician</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.168034</td>\n",
       "      <td>0.373901</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>job_unemployed</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.028820</td>\n",
       "      <td>0.167303</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>job_unknown</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.006370</td>\n",
       "      <td>0.079559</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>marital_divorced</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.115171</td>\n",
       "      <td>0.319232</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>marital_married</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.601933</td>\n",
       "      <td>0.489505</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>marital_single</td>\n",
       "      <td>45211.0</td>\n",
       "      <td>0.282896</td>\n",
       "      <td>0.450411</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     count         mean          std     min    25%    50%  \\\n",
       "age                45211.0    40.936210    10.618762    18.0   33.0   39.0   \n",
       "education          45211.0     2.019442     0.902795    -1.0    2.0    2.0   \n",
       "default            45211.0     0.018027     0.133049     0.0    0.0    0.0   \n",
       "balance            45211.0  1362.272058  3044.765829 -8019.0   72.0  448.0   \n",
       "housing            45211.0     0.555838     0.496878     0.0    0.0    1.0   \n",
       "loan               45211.0     0.160226     0.366820     0.0    0.0    0.0   \n",
       "duration           45211.0   258.163080   257.527812     0.0  103.0  180.0   \n",
       "campaign           45211.0     2.763841     3.098021     1.0    1.0    2.0   \n",
       "pdays              45211.0    40.197828   100.128746    -1.0   -1.0   -1.0   \n",
       "previous           45211.0     0.580323     2.303441     0.0    0.0    0.0   \n",
       "Target             45211.0     0.116985     0.321406     0.0    0.0    0.0   \n",
       "day_of_week        45211.0     4.992922     1.423347     1.0    4.0    5.0   \n",
       "job_admin.         45211.0     0.114375     0.318269     0.0    0.0    0.0   \n",
       "job_blue-collar    45211.0     0.215257     0.411005     0.0    0.0    0.0   \n",
       "job_entrepreneur   45211.0     0.032890     0.178351     0.0    0.0    0.0   \n",
       "job_housemaid      45211.0     0.027427     0.163326     0.0    0.0    0.0   \n",
       "job_management     45211.0     0.209197     0.406740     0.0    0.0    0.0   \n",
       "job_retired        45211.0     0.050076     0.218105     0.0    0.0    0.0   \n",
       "job_self-employed  45211.0     0.034925     0.183592     0.0    0.0    0.0   \n",
       "job_services       45211.0     0.091880     0.288860     0.0    0.0    0.0   \n",
       "job_student        45211.0     0.020747     0.142538     0.0    0.0    0.0   \n",
       "job_technician     45211.0     0.168034     0.373901     0.0    0.0    0.0   \n",
       "job_unemployed     45211.0     0.028820     0.167303     0.0    0.0    0.0   \n",
       "job_unknown        45211.0     0.006370     0.079559     0.0    0.0    0.0   \n",
       "marital_divorced   45211.0     0.115171     0.319232     0.0    0.0    0.0   \n",
       "marital_married    45211.0     0.601933     0.489505     0.0    0.0    1.0   \n",
       "marital_single     45211.0     0.282896     0.450411     0.0    0.0    0.0   \n",
       "\n",
       "                      75%       max  \n",
       "age                  48.0      95.0  \n",
       "education             3.0       3.0  \n",
       "default               0.0       1.0  \n",
       "balance            1428.0  102127.0  \n",
       "housing               1.0       1.0  \n",
       "loan                  0.0       1.0  \n",
       "duration            319.0    4918.0  \n",
       "campaign              3.0      63.0  \n",
       "pdays                -1.0     871.0  \n",
       "previous              0.0     275.0  \n",
       "Target                0.0       1.0  \n",
       "day_of_week           6.0       7.0  \n",
       "job_admin.            0.0       1.0  \n",
       "job_blue-collar       0.0       1.0  \n",
       "job_entrepreneur      0.0       1.0  \n",
       "job_housemaid         0.0       1.0  \n",
       "job_management        0.0       1.0  \n",
       "job_retired           0.0       1.0  \n",
       "job_self-employed     0.0       1.0  \n",
       "job_services          0.0       1.0  \n",
       "job_student           0.0       1.0  \n",
       "job_technician        0.0       1.0  \n",
       "job_unemployed        0.0       1.0  \n",
       "job_unknown           0.0       1.0  \n",
       "marital_divorced      0.0       1.0  \n",
       "marital_married       1.0       1.0  \n",
       "marital_single        1.0       1.0  "
      ]
     },
     "execution_count": 782,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.describe().transpose()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.2 Ensure Attribute Types are Correct "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 783,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age                           int64\n",
       "education                     int64\n",
       "default                       int64\n",
       "balance                       int64\n",
       "housing                       int64\n",
       "loan                          int64\n",
       "duration                      int64\n",
       "campaign                      int64\n",
       "pdays                         int64\n",
       "previous                      int64\n",
       "Target                        int64\n",
       "date                 datetime64[ns]\n",
       "day_of_week                   int64\n",
       "job_admin.                    uint8\n",
       "job_blue-collar               uint8\n",
       "job_entrepreneur              uint8\n",
       "job_housemaid                 uint8\n",
       "job_management                uint8\n",
       "job_retired                   uint8\n",
       "job_self-employed             uint8\n",
       "job_services                  uint8\n",
       "job_student                   uint8\n",
       "job_technician                uint8\n",
       "job_unemployed                uint8\n",
       "job_unknown                   uint8\n",
       "marital_divorced              uint8\n",
       "marital_married               uint8\n",
       "marital_single                uint8\n",
       "dtype: object"
      ]
     },
     "execution_count": 783,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 784,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age                    int64\n",
       "education              int64\n",
       "default                int64\n",
       "balance                int64\n",
       "housing                int64\n",
       "loan                   int64\n",
       "duration               int64\n",
       "campaign               int64\n",
       "pdays                  int64\n",
       "previous               int64\n",
       "Target                 int64\n",
       "date                 float64\n",
       "day_of_week            int64\n",
       "job_admin.             uint8\n",
       "job_blue-collar        uint8\n",
       "job_entrepreneur       uint8\n",
       "job_housemaid          uint8\n",
       "job_management         uint8\n",
       "job_retired            uint8\n",
       "job_self-employed      uint8\n",
       "job_services           uint8\n",
       "job_student            uint8\n",
       "job_technician         uint8\n",
       "job_unemployed         uint8\n",
       "job_unknown            uint8\n",
       "marital_divorced       uint8\n",
       "marital_married        uint8\n",
       "marital_single         uint8\n",
       "dtype: object"
      ]
     },
     "execution_count": 784,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank['date'] = df_bank['date'].astype(int)/100000000000\n",
    "df_bank.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.3 Transform the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "we've already performed label encording, one hot encoding and we have also scaled the categorical ordinal data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "we can further transform the data by balancing the variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 785,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32    2085\n",
       "31    1996\n",
       "33    1972\n",
       "34    1930\n",
       "35    1894\n",
       "      ... \n",
       "90       2\n",
       "92       2\n",
       "93       2\n",
       "95       2\n",
       "94       1\n",
       "Name: age, Length: 77, dtype: int64"
      ]
     },
     "execution_count": 785,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bank.age.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.4 Create the training set and test set in ration of 70:30"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 786,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = df_bank['Target']\n",
    "x = df_bank.drop(['Target'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 787,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = .3, random_state = 20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 788,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Target True Values    : 5289 (11.70%)\n",
      "Original Target  False Values   : 39922 (88.30%)\n",
      "\n",
      "Training Target  True Values    : 3731 (11.79%)\n",
      "Training Target False Values   : 27916 (88.21%)\n",
      "\n",
      "Test Target  True Values        : 1558 (11.49%)\n",
      "Test Target  False Values       : 12006 (88.51%)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Original Target True Values    : {0} ({1:0.2f}%)\".format(len(df_bank.loc[df_bank['Target'] == 1]), (len(df_bank.loc[df_bank['Target'] == 1])/len(df_bank.index)) * 100))\n",
    "print(\"Original Target  False Values   : {0} ({1:0.2f}%)\".format(len(df_bank.loc[df_bank['Target'] == 0]), (len(df_bank.loc[df_bank['Target'] == 0])/len(df_bank.index)) * 100))\n",
    "print(\"\")\n",
    "print(\"Training Target  True Values    : {0} ({1:0.2f}%)\".format(len(y_train[y_train[:] == 1]), (len(y_train[y_train[:] == 1])/len(y_train)) * 100))\n",
    "print(\"Training Target False Values   : {0} ({1:0.2f}%)\".format(len(y_train[y_train[:] == 0]), (len(y_train[y_train[:] == 0])/len(y_train)) * 100))\n",
    "print(\"\")\n",
    "print(\"Test Target  True Values        : {0} ({1:0.2f}%)\".format(len(y_test[y_test[:] == 1]), (len(y_test[y_test[:] == 1])/len(y_test)) * 100))\n",
    "print(\"Test Target  False Values       : {0} ({1:0.2f}%)\".format(len(y_test[y_test[:] == 0]), (len(y_test[y_test[:] == 0])/len(y_test)) * 100))\n",
    "print(\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.1\tWrite python code using scikitlearn, pandas, numpy and others in Jupyter notebook to train and test the ensemble model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 789,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import accuracy_score,f1_score,recall_score,precision_score, confusion_matrix\n",
    "import statsmodels.api as sm\n",
    "from scipy import stats"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.2\tFirst create a model using standard classification algorithm. Note the model performance.\n",
    "# 3.3\tUse appropriate algorithms and explain why that algorithm in the comment lines\n",
    "# 3.4   Evaluate the model. Use confusion matrix to evaluate class level metrics i.e..Precision and recall. Also reflect the overall score of the model.\n",
    "# 3.5 Advantages and disadvantages of the algorithm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will first use logistic regression and then a decision tree (unpruned and pruned) as our standard classification algorithm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.2.1 - Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 790,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.238712\n",
      "         Iterations 8\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2495: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "logit = sm.Logit(y_train, sm.add_constant(x_train))\n",
    "lg = logit.fit()\n",
    "# fitting our training data to a logistic regression algorithm from statsmodel.api"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 791,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                 Target   No. Observations:                31647\n",
      "Model:                          Logit   Df Residuals:                    31621\n",
      "Method:                           MLE   Df Model:                           25\n",
      "Date:                Fri, 31 Jan 2020   Pseudo R-squ.:                  0.3419\n",
      "Time:                        16:00:21   Log-Likelihood:                -7554.5\n",
      "converged:                       True   LL-Null:                       -11479.\n",
      "Covariance Type:            nonrobust   LLR p-value:                     0.000\n",
      "=====================================================================================\n",
      "                        coef    std err          z      P>|z|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------------\n",
      "const               -50.0749        nan        nan        nan         nan         nan\n",
      "age                  -0.0027      0.003     -1.066      0.286      -0.008       0.002\n",
      "education             0.0772      0.027      2.833      0.005       0.024       0.131\n",
      "default               0.1396      0.195      0.717      0.474      -0.242       0.521\n",
      "balance            1.327e-05   6.16e-06      2.154      0.031    1.19e-06    2.54e-05\n",
      "housing              -0.6463      0.048    -13.470      0.000      -0.740      -0.552\n",
      "loan                 -0.3123      0.070     -4.465      0.000      -0.449      -0.175\n",
      "duration              0.0043    7.7e-05     55.322      0.000       0.004       0.004\n",
      "campaign             -0.0541      0.012     -4.603      0.000      -0.077      -0.031\n",
      "pdays                -0.0008      0.000     -3.975      0.000      -0.001      -0.000\n",
      "previous              0.0047      0.007      0.695      0.487      -0.009       0.018\n",
      "date               5.693e-06   1.25e-07     45.615      0.000    5.45e-06    5.94e-06\n",
      "day_of_week           0.0297      0.015      1.960      0.050   -3.95e-06       0.059\n",
      "job_admin.           -5.9482        nan        nan        nan         nan         nan\n",
      "job_blue-collar      -6.2183        nan        nan        nan         nan         nan\n",
      "job_entrepreneur     -6.3288        nan        nan        nan         nan         nan\n",
      "job_housemaid        -6.2924        nan        nan        nan         nan         nan\n",
      "job_management       -5.9744        nan        nan        nan         nan         nan\n",
      "job_retired          -5.9095        nan        nan        nan         nan         nan\n",
      "job_self-employed    -6.1819        nan        nan        nan         nan         nan\n",
      "job_services         -6.1107        nan        nan        nan         nan         nan\n",
      "job_student          -5.9064        nan        nan        nan         nan         nan\n",
      "job_technician       -6.0058        nan        nan        nan         nan         nan\n",
      "job_unemployed       -6.1404        nan        nan        nan         nan         nan\n",
      "job_unknown          -6.3408        nan        nan        nan         nan         nan\n",
      "marital_divorced    -17.2184        nan        nan        nan         nan         nan\n",
      "marital_married     -17.4079        nan        nan        nan         nan         nan\n",
      "marital_single      -17.2396        nan        nan        nan         nan         nan\n",
      "=====================================================================================\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/statsmodels/base/model.py:1286: RuntimeWarning: invalid value encountered in sqrt\n",
      "  bse_ = np.sqrt(np.diag(self.cov_params()))\n",
      "//anaconda3/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:901: RuntimeWarning: invalid value encountered in greater\n",
      "  return (a < x) & (x < b)\n",
      "//anaconda3/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:901: RuntimeWarning: invalid value encountered in less\n",
      "  return (a < x) & (x < b)\n",
      "//anaconda3/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:1892: RuntimeWarning: invalid value encountered in less_equal\n",
      "  cond2 = cond0 & (x <= _a)\n"
     ]
    }
   ],
   "source": [
    "stats.chisqprob = lambda chisq, df_bank: stats.chi2.sf(chisq, df_bank)\n",
    "print(lg.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A pseudo R^2 of 23% indicates that 23% of the uncertainty of the intercept only model is explained by the full model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 792,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='warn', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='warn', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 792,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "logreg = LogisticRegression()\n",
    "logreg.fit(x_train, y_train)\n",
    "#fitting our training data to scikit-learn logistic regression package."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 793,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_train = logreg.predict(x_train)\n",
    "#prediction of class outcome from x_train (training independent variables)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 794,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "confusion matrix = \n",
      " [[27907     9]\n",
      " [ 3731     0]]\n",
      "Recall of train dataset is 0.0\n"
     ]
    }
   ],
   "source": [
    "#Predict for train set\n",
    "pred_train = logreg.predict(x_train)\n",
    "\n",
    "from sklearn.metrics import classification_report,confusion_matrix,accuracy_score\n",
    "\n",
    "mat_train = confusion_matrix(y_train,pred_train)\n",
    "\n",
    "print(\"confusion matrix = \\n\",mat_train)\n",
    "\n",
    "#Recall\n",
    "print('Recall of train dataset is ' + str(mat_train[1,1]/(mat_train[1,1]+mat_train[1,0])))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 795,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "confusion matrix = \n",
      " [[12004     2]\n",
      " [ 1556     2]]\n",
      "Recall of test dataset is 0.0012836970474967907\n"
     ]
    }
   ],
   "source": [
    "#Predict for test set\n",
    "pred_test = logreg.predict(x_test)\n",
    "\n",
    "mat_test = confusion_matrix(y_test,pred_test)\n",
    "print(\"confusion matrix = \\n\",mat_test)\n",
    "\n",
    "#Recall\n",
    "print('Recall of test dataset is ' + str(mat_test[1,1]/(mat_test[1,1]+mat_test[1,0])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 796,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy score of train dataset is 0.8818213416753563\n",
      "accuracy score of test dataset is 0.8851371276909467\n"
     ]
    }
   ],
   "source": [
    "print('accuracy score of train dataset is '+ str(accuracy_score(y_train,pred_train)))\n",
    "print('accuracy score of test dataset is '+ str(accuracy_score(y_test,pred_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 797,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of train: 0.8818213416753563\n",
      "Precision of train: 0.0\n",
      "Precision of test: 0.5\n",
      "Recall of train: 0.0\n",
      "Recall of test: 0.0012836970474967907\n"
     ]
    }
   ],
   "source": [
    "print(\"Accuracy of train:\",metrics.accuracy_score(y_train, pred_train))\n",
    "print(\"Precision of train:\",metrics.precision_score(y_train, pred_train))\n",
    "print(\"Precision of test:\",metrics.precision_score(y_test, pred_test))\n",
    "print(\"Recall of train:\",metrics.recall_score(y_train, pred_train))\n",
    "print(\"Recall of test:\",metrics.recall_score(y_test, pred_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 798,
   "metadata": {},
   "outputs": [],
   "source": [
    "resultsdf = None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 799,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>accuracy_train</th>\n",
       "      <th>accuracy_test</th>\n",
       "      <th>precision_train</th>\n",
       "      <th>precision_test</th>\n",
       "      <th>recall_train</th>\n",
       "      <th>recall_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>0.881821</td>\n",
       "      <td>0.885137</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.001284</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                model  accuracy_train  accuracy_test  precision_train  \\\n",
       "0  LogisticRegression        0.881821       0.885137              0.0   \n",
       "\n",
       "   precision_test  recall_train  recall_test  \n",
       "0             0.5           0.0     0.001284  "
      ]
     },
     "execution_count": 799,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tempresultsdf = pd.DataFrame({'model':['LogisticRegression'], 'accuracy_train':[accuracy_score(y_train,pred_train)],\n",
    "                         'accuracy_test':[accuracy_score(y_test,pred_test)], 'precision_train':[metrics.precision_score(y_train, pred_train)],\n",
    "                         'precision_test':[metrics.precision_score(y_test, pred_test)], 'recall_train':[metrics.recall_score(y_train, pred_train)],\n",
    "                         'recall_test':[metrics.recall_score(y_test, pred_test)]})\n",
    "resultsdf = pd.concat([resultsdf, tempresultsdf])\n",
    "resultsdf "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.2.2 - Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 800,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 801,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_entropy=DecisionTreeClassifier(criterion='entropy',random_state = 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 802,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(class_weight=None, criterion='entropy', max_depth=None,\n",
       "                       max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort=False,\n",
       "                       random_state=100, splitter='best')"
      ]
     },
     "execution_count": 802,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_entropy.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 803,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 803,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#accuracy on train data\n",
    "model_entropy.score(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 804,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 804,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check\n",
    "pred_dt_train=model_entropy.predict(x_train)\n",
    "actual_dt_train=y_train[:,]\n",
    "accuracy_score(pred_dt_train,actual_dt_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 805,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8882335594219994"
      ]
     },
     "execution_count": 805,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#accracy on test data\n",
    "model_entropy.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 806,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8882335594219994"
      ]
     },
     "execution_count": 806,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check\n",
    "pred_dt=model_entropy.predict(x_test)\n",
    "actual_dt=y_test[:,]\n",
    "accuracy_score(pred_dt,actual_dt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 807,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "confusion matrix of test dataset = \n",
      " [[11209   719]\n",
      " [  797   839]]\n",
      "confusion matrix of trained dataset = \n",
      " [[27916     0]\n",
      " [    0  3731]]\n"
     ]
    }
   ],
   "source": [
    "print(\"confusion matrix of test dataset = \\n\",confusion_matrix(pred_dt,actual_dt))\n",
    "print(\"confusion matrix of trained dataset = \\n\",confusion_matrix(pred_dt_train,actual_dt_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 808,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "confusion matrix of test dataset = \n",
      " [[11209   797]\n",
      " [  719   839]]\n",
      "confusion matrix of trained dataset = \n",
      " [[27916     0]\n",
      " [    0  3731]]\n"
     ]
    }
   ],
   "source": [
    "print(\"confusion matrix of test dataset = \\n\",confusion_matrix(actual_dt, pred_dt))\n",
    "print(\"confusion matrix of trained dataset = \\n\",confusion_matrix(actual_dt_train, pred_dt_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 809,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>accuracy_train</th>\n",
       "      <th>accuracy_test</th>\n",
       "      <th>precision_train</th>\n",
       "      <th>precision_test</th>\n",
       "      <th>recall_train</th>\n",
       "      <th>recall_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>0.881821</td>\n",
       "      <td>0.885137</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.001284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>DecisionTree</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.888234</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.512836</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.538511</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                model  accuracy_train  accuracy_test  precision_train  \\\n",
       "0  LogisticRegression        0.881821       0.885137              0.0   \n",
       "0        DecisionTree        1.000000       0.888234              1.0   \n",
       "\n",
       "   precision_test  recall_train  recall_test  \n",
       "0        0.500000           0.0     0.001284  \n",
       "0        0.512836           1.0     0.538511  "
      ]
     },
     "execution_count": 809,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tempresultsdf = pd.DataFrame({'model':['DecisionTree'], \n",
    "                          'accuracy_train':[accuracy_score(actual_dt_train, pred_dt_train)],\n",
    "                         'accuracy_test':[accuracy_score(actual_dt, pred_dt)], \n",
    "                          'precision_train':[metrics.precision_score(actual_dt_train, pred_dt_train)],\n",
    "                         'precision_test':[metrics.precision_score(actual_dt, pred_dt)], \n",
    "                          'recall_train':[metrics.recall_score(actual_dt_train, pred_dt_train)],\n",
    "                         'recall_test':[metrics.recall_score(actual_dt, pred_dt)]})\n",
    "resultsdf = pd.concat([resultsdf, tempresultsdf])\n",
    "resultsdf "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 810,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import export_graphviz\n",
    "from sklearn.externals.six import StringIO  \n",
    "from IPython.display import Image  \n",
    "import pydotplus\n",
    "import graphviz\n",
    "\n",
    "feature_cols = x_train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 811,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dot_data = StringIO()\n",
    "#export_graphviz(model_entropy, out_file=dot_data,  \n",
    "#                filled=True, rounded=True,\n",
    "#                special_characters=True,feature_names = feature_cols,class_names=['0','1'])\n",
    "\n",
    "#graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \n",
    "\n",
    "#graph.write_png('bank.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 812,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(class_weight=None, criterion='entropy', max_depth=3,\n",
       "                       max_features=9, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort=False,\n",
       "                       random_state=100, splitter='best')"
      ]
     },
     "execution_count": 812,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_pruned = DecisionTreeClassifier(criterion = \"entropy\", random_state = 100,\n",
    "                               max_depth=3, max_features=9)\n",
    "clf_pruned.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 813,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dot_data = StringIO()\n",
    "#export_graphviz(clf_pruned, out_file=dot_data,  \n",
    "#                filled=True, rounded=True,\n",
    "#                special_characters=True,feature_names = feature_cols,class_names=['0','1'])\n",
    "#graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \n",
    "#graph.write_png('bank_pruned.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 814,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Image(graph.create_png())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 815,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy of pruned test dataset 0.8862429961663226\n",
      "accuracy of pruned train dataset 0.883559263121307\n",
      "precision of pruned test dataset 0.5572519083969466\n",
      "precision of pruned train dataset 0.5761589403973509\n",
      "recall of pruned test dataset 0.04685494223363286\n",
      "recall of pruned train dataset 0.046636290538729565\n"
     ]
    }
   ],
   "source": [
    "preds_pruned = clf_pruned.predict(x_test)\n",
    "preds_pruned_train = clf_pruned.predict(x_train)\n",
    "print('accuracy of pruned test dataset ' + str(accuracy_score(y_test,preds_pruned)))\n",
    "print('accuracy of pruned train dataset ' + str(accuracy_score(y_train,preds_pruned_train)))\n",
    "print('precision of pruned test dataset ' + str(metrics.precision_score(y_test,preds_pruned)))\n",
    "print('precision of pruned train dataset ' + str(metrics.precision_score(y_train,preds_pruned_train)))\n",
    "print('recall of pruned test dataset ' + str(metrics.recall_score(y_test,preds_pruned)))\n",
    "print('recall of pruned train dataset ' + str(metrics.recall_score(y_train,preds_pruned_train)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 816,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>accuracy_train</th>\n",
       "      <th>accuracy_test</th>\n",
       "      <th>precision_train</th>\n",
       "      <th>precision_test</th>\n",
       "      <th>recall_train</th>\n",
       "      <th>recall_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>0.881821</td>\n",
       "      <td>0.885137</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.001284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>DecisionTree</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.888234</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.512836</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.538511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>DecisionTree_pruned</td>\n",
       "      <td>0.883559</td>\n",
       "      <td>0.886243</td>\n",
       "      <td>0.576159</td>\n",
       "      <td>0.557252</td>\n",
       "      <td>0.046636</td>\n",
       "      <td>0.046855</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 model  accuracy_train  accuracy_test  precision_train  \\\n",
       "0   LogisticRegression        0.881821       0.885137         0.000000   \n",
       "0         DecisionTree        1.000000       0.888234         1.000000   \n",
       "0  DecisionTree_pruned        0.883559       0.886243         0.576159   \n",
       "\n",
       "   precision_test  recall_train  recall_test  \n",
       "0        0.500000      0.000000     0.001284  \n",
       "0        0.512836      1.000000     0.538511  \n",
       "0        0.557252      0.046636     0.046855  "
      ]
     },
     "execution_count": 816,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tempresultsdf = pd.DataFrame({'model':['DecisionTree_pruned'], \n",
    "                          'accuracy_train':[accuracy_score(y_train,preds_pruned_train)],\n",
    "                         'accuracy_test':[accuracy_score(y_test,preds_pruned)], \n",
    "                          'precision_train':[metrics.precision_score(y_train,preds_pruned_train)],\n",
    "                         'precision_test':[metrics.precision_score(y_test,preds_pruned)], \n",
    "                          'recall_train':[metrics.recall_score(y_train,preds_pruned_train)],\n",
    "                         'recall_test':[metrics.recall_score(y_test,preds_pruned)]})\n",
    "resultsdf = pd.concat([resultsdf, tempresultsdf])\n",
    "resultsdf "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 817,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[27788   128]\n",
      " [ 3557   174]]\n",
      "Recall of train dataset is 0.046636290538729565\n"
     ]
    }
   ],
   "source": [
    "mat_train = confusion_matrix(y_train,preds_pruned_train)\n",
    "print(mat_train)\n",
    "print('Recall of train dataset is ' + str(mat_train[1,1]/(mat_train[1,1]+mat_train[1,0])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 818,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[11948    58]\n",
      " [ 1485    73]]\n",
      "Recall of test dataset is 0.04685494223363286\n"
     ]
    }
   ],
   "source": [
    "mat_test = confusion_matrix(y_test,preds_pruned)\n",
    "print(mat_test)\n",
    "print('Recall of test dataset is ' + str(mat_test[1,1]/(mat_test[1,1]+mat_test[1,0])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.5\tAdvantages and disadvantages of the algorithm.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "LogisticRegression\n",
    "<br>\n",
    "<br>\n",
    "    Advantages - independent variables don't have to be normally distributed\n",
    "<br>\n",
    "    Disadvantages - variables that have weak correlation to dependent variable do not offer much help in prediction\n",
    "<br>\n",
    "<br>\n",
    "DecisionTree_non prune\n",
    "<br>\n",
    "<br>\n",
    "    Advantages - procesing is intuitive\n",
    "<br>\n",
    "    Disadvantages - Although the logic is intuitive, processing can be heavy. Will overfit the data. i.e. will produce good scores on the train dataset but relatively poor scores on the test dataset. \n",
    "<br>\n",
    "<br>\n",
    "DecisionTree_pruned\n",
    "<br>\n",
    "<br>\n",
    "    Advantages - solve the over fitting problem\n",
    "<br>\n",
    "    Disadvantages - procesing is still cumbersome, and if starting with weak predictors it will be difficult to achieve a good result even with many independent variables\n",
    "<br>\n",
    "<br>\n",
    "RandomForest\n",
    "<br>\n",
    "<br>\n",
    "    Advantages - given a poor/average prediction results from decision tree model, you can improve it through random forest method. you are pooling weak predictors and making the predictions stronger through numbers. Allows the model to recycle the data for gain in your model's score.\n",
    "<br>\n",
    "    Disadvantages - computationally heavy and will overfit if allowed to grow.\n",
    "<br>\n",
    "<br>\n",
    "RandomForest_pruned\n",
    "<br>\n",
    "<br>\n",
    "    Advantages - by pruning, overfitting can be prevented and therefore computationally managemable. \n",
    "<br>\n",
    "    Disadvantages - in order to achieve good outcome, may have to sacrifice computation still.\n",
    "<br>\n",
    "<br>\n",
    "BaggingClassifier\n",
    "<br>\n",
    "<br>\n",
    "    Advantages - uses voting, like random forest and uses same type of model. So long as you can explain the base model, it's then easy to interpret the resutls. Equal weights on the model, models are independetly built\n",
    "<br>\n",
    "    Disadvantages - with  many hyper parameters to choose from, need to invest on finding the optimal ensemble model\n",
    "<br>\n",
    "<br>\n",
    "Boosting\n",
    "<br>\n",
    "<br>\n",
    "    Advantages - New model is influenced by the performance of the model built previously. So the logic is to build underfitted (shallow trees) and then the proceeding models will build upon it to boost the overall performance. It's primarilty used to reduce bias as well as variance.\n",
    "<br>\n",
    "    Disadvantages - harder to tune, due to so many hyperparameters, and hard to interpret\n",
    "<br>\n",
    "<br>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.6\tBuild the ensemble models and compare the results with the base model. Note: Random forest can be used only with Decision trees. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.6.2 Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 819,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rfcl = RandomForestClassifier(n_estimators = 100)\n",
    "rfcl = rfcl.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 820,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_RF = rfcl.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 821,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9107932763196697"
      ]
     },
     "execution_count": 821,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "acc_RF = accuracy_score(y_test, pred_RF)\n",
    "acc_RF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 822,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 822,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_RF_training = rfcl.predict(x_train)\n",
    "acc_RF_training= accuracy_score(y_train, pred_RF_training)\n",
    "acc_RF_training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 823,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing Accuracy : 0.9107932763196697\n",
      "Training Accuracy : 1.0\n",
      "precision of test dataset 0.6550802139037433\n",
      "precision of train dataset 1.0\n",
      "recall of test dataset 0.47175866495507063\n",
      "recall of train dataset 1.0\n"
     ]
    }
   ],
   "source": [
    "pred_RF = rfcl.predict(x_test)\n",
    "acc_RF = accuracy_score(y_test, pred_RF)\n",
    "print (\"Testing Accuracy :\",acc_RF)\n",
    "pred_RF_training = rfcl.predict(x_train)\n",
    "acc_RF_training= accuracy_score(y_train, pred_RF_training)\n",
    "print (\"Training Accuracy :\",acc_RF_training)\n",
    "print('precision of test dataset ' + str(metrics.precision_score(y_test,pred_RF)))\n",
    "print('precision of train dataset ' + str(metrics.precision_score(y_train,pred_RF_training)))\n",
    "print('recall of test dataset ' + str(metrics.recall_score(y_test,pred_RF)))\n",
    "print('recall of train dataset ' + str(metrics.recall_score(y_train,pred_RF_training)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 824,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>accuracy_train</th>\n",
       "      <th>accuracy_test</th>\n",
       "      <th>precision_train</th>\n",
       "      <th>precision_test</th>\n",
       "      <th>recall_train</th>\n",
       "      <th>recall_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>0.881821</td>\n",
       "      <td>0.885137</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.001284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>DecisionTree</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.888234</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.512836</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.538511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>DecisionTree_pruned</td>\n",
       "      <td>0.883559</td>\n",
       "      <td>0.886243</td>\n",
       "      <td>0.576159</td>\n",
       "      <td>0.557252</td>\n",
       "      <td>0.046636</td>\n",
       "      <td>0.046855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>RandomForest</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.910793</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.655080</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.471759</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 model  accuracy_train  accuracy_test  precision_train  \\\n",
       "0   LogisticRegression        0.881821       0.885137         0.000000   \n",
       "0         DecisionTree        1.000000       0.888234         1.000000   \n",
       "0  DecisionTree_pruned        0.883559       0.886243         0.576159   \n",
       "0         RandomForest        1.000000       0.910793         1.000000   \n",
       "\n",
       "   precision_test  recall_train  recall_test  \n",
       "0        0.500000      0.000000     0.001284  \n",
       "0        0.512836      1.000000     0.538511  \n",
       "0        0.557252      0.046636     0.046855  \n",
       "0        0.655080      1.000000     0.471759  "
      ]
     },
     "execution_count": 824,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tempresultsdf = pd.DataFrame({'model':['RandomForest'], \n",
    "                          'accuracy_train':[acc_RF_training],\n",
    "                         'accuracy_test':[acc_RF], \n",
    "                          'precision_train':[metrics.precision_score(y_train,pred_RF_training)],\n",
    "                         'precision_test':[metrics.precision_score(y_test,pred_RF)], \n",
    "                          'recall_train':[metrics.recall_score(y_train,pred_RF_training)],\n",
    "                         'recall_test':[metrics.recall_score(y_test,pred_RF)]})\n",
    "resultsdf = pd.concat([resultsdf, tempresultsdf])\n",
    "resultsdf "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 825,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "confusion matrix of test dataset = \n",
      " [[11619   387]\n",
      " [  823   735]]\n",
      "confusion matrix of trained dataset = \n",
      " [[27916     0]\n",
      " [    0  3731]]\n"
     ]
    }
   ],
   "source": [
    "print(\"confusion matrix of test dataset = \\n\",confusion_matrix(y_test, pred_RF))\n",
    "print(\"confusion matrix of trained dataset = \\n\",confusion_matrix(y_train,pred_RF_training))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 826,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Pruned Random Forest \n",
    "rfcl_pr = RandomForestClassifier(n_estimators = 100,criterion = \"entropy\", random_state = 100,\n",
    "                              max_depth=8, min_samples_leaf=5)\n",
    "rfcl_pr = rfcl_pr.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 827,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing Accuracy : 0.9017988793866116\n",
      "Training Accuracy : 0.9034663633203779\n",
      "precision of pruned test dataset 0.6799363057324841\n",
      "precision of pruned train dataset 0.7387005649717514\n",
      "recall of pruned test dataset 0.2740693196405648\n",
      "recall of pruned train dataset 0.2803537925489145\n"
     ]
    }
   ],
   "source": [
    "pred_RF_pr = rfcl_pr.predict(x_test)\n",
    "acc_RF_pr = accuracy_score(y_test, pred_RF_pr)\n",
    "print (\"Testing Accuracy :\",acc_RF_pr)\n",
    "pred_RF_pr_training = rfcl_pr.predict(x_train)\n",
    "acc_RF_pr_training= accuracy_score(y_train, pred_RF_pr_training)\n",
    "print (\"Training Accuracy :\",acc_RF_pr_training)\n",
    "print('precision of pruned test dataset ' + str(metrics.precision_score(y_test,pred_RF_pr)))\n",
    "print('precision of pruned train dataset ' + str(metrics.precision_score(y_train,pred_RF_pr_training)))\n",
    "print('recall of pruned test dataset ' + str(metrics.recall_score(y_test,pred_RF_pr)))\n",
    "print('recall of pruned train dataset ' + str(metrics.recall_score(y_train,pred_RF_pr_training)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 828,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "confusion matrix of test dataset = \n",
      " [[11805   201]\n",
      " [ 1131   427]]\n",
      "confusion matrix of trained dataset = \n",
      " [[27546   370]\n",
      " [ 2685  1046]]\n"
     ]
    }
   ],
   "source": [
    "print(\"confusion matrix of test dataset = \\n\",confusion_matrix(y_test, pred_RF_pr))\n",
    "print(\"confusion matrix of trained dataset = \\n\",confusion_matrix(y_train,pred_RF_pr_training))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 829,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>accuracy_train</th>\n",
       "      <th>accuracy_test</th>\n",
       "      <th>precision_train</th>\n",
       "      <th>precision_test</th>\n",
       "      <th>recall_train</th>\n",
       "      <th>recall_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>0.881821</td>\n",
       "      <td>0.885137</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.001284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>DecisionTree</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.888234</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.512836</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.538511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>DecisionTree_pruned</td>\n",
       "      <td>0.883559</td>\n",
       "      <td>0.886243</td>\n",
       "      <td>0.576159</td>\n",
       "      <td>0.557252</td>\n",
       "      <td>0.046636</td>\n",
       "      <td>0.046855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>RandomForest</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.910793</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.655080</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.471759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>RandomForest_pruned</td>\n",
       "      <td>0.903466</td>\n",
       "      <td>0.901799</td>\n",
       "      <td>0.738701</td>\n",
       "      <td>0.679936</td>\n",
       "      <td>0.280354</td>\n",
       "      <td>0.274069</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 model  accuracy_train  accuracy_test  precision_train  \\\n",
       "0   LogisticRegression        0.881821       0.885137         0.000000   \n",
       "0         DecisionTree        1.000000       0.888234         1.000000   \n",
       "0  DecisionTree_pruned        0.883559       0.886243         0.576159   \n",
       "0         RandomForest        1.000000       0.910793         1.000000   \n",
       "0  RandomForest_pruned        0.903466       0.901799         0.738701   \n",
       "\n",
       "   precision_test  recall_train  recall_test  \n",
       "0        0.500000      0.000000     0.001284  \n",
       "0        0.512836      1.000000     0.538511  \n",
       "0        0.557252      0.046636     0.046855  \n",
       "0        0.655080      1.000000     0.471759  \n",
       "0        0.679936      0.280354     0.274069  "
      ]
     },
     "execution_count": 829,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tempresultsdf = pd.DataFrame({'model':['RandomForest_pruned'], \n",
    "                          'accuracy_train':[acc_RF_pr_training],\n",
    "                         'accuracy_test':[acc_RF_pr], \n",
    "                          'precision_train':[metrics.precision_score(y_train,pred_RF_pr_training)],\n",
    "                         'precision_test':[metrics.precision_score(y_test,pred_RF_pr)], \n",
    "                          'recall_train':[metrics.recall_score(y_train,pred_RF_pr_training)],\n",
    "                         'recall_test':[metrics.recall_score(y_test,pred_RF_pr)]})\n",
    "resultsdf = pd.concat([resultsdf, tempresultsdf])\n",
    "resultsdf "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.6.2 Bagging Technique"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 830,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import BaggingClassifier\n",
    "\n",
    "bgcl = BaggingClassifier(n_estimators=100, max_samples= 1.0, bootstrap=True, random_state=100)\n",
    "bgcl = bgcl.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 831,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing Accuracy : 0.9099085815393689\n",
      "Training Accuracy : 0.9999684014282555\n",
      "precision of test dataset 0.6186440677966102\n",
      "precision of train dataset 1.0\n",
      "recall of test dataset 0.5622593068035944\n",
      "recall of train dataset 0.9997319753417314\n"
     ]
    }
   ],
   "source": [
    "pred_BG = bgcl.predict(x_test)\n",
    "acc_BG = accuracy_score(y_test, pred_BG)\n",
    "print (\"Testing Accuracy :\",acc_BG)\n",
    "pred_BG_training = bgcl.predict(x_train)\n",
    "acc_BG_training= accuracy_score(y_train, pred_BG_training)\n",
    "print (\"Training Accuracy :\",acc_BG_training)\n",
    "print('precision of test dataset ' + str(metrics.precision_score(y_test,pred_BG)))\n",
    "print('precision of train dataset ' + str(metrics.precision_score(y_train,pred_BG_training)))\n",
    "print('recall of test dataset ' + str(metrics.recall_score(y_test,pred_BG)))\n",
    "print('recall of train dataset ' + str(metrics.recall_score(y_train,pred_BG_training)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 832,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "confusion matrix of test dataset = \n",
      " [[11466   540]\n",
      " [  682   876]]\n",
      "confusion matrix of trained dataset = \n",
      " [[27916     0]\n",
      " [    1  3730]]\n"
     ]
    }
   ],
   "source": [
    "print(\"confusion matrix of test dataset = \\n\",confusion_matrix(y_test, pred_BG))\n",
    "print(\"confusion matrix of trained dataset = \\n\",confusion_matrix(y_train,pred_BG_training))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 833,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>accuracy_train</th>\n",
       "      <th>accuracy_test</th>\n",
       "      <th>precision_train</th>\n",
       "      <th>precision_test</th>\n",
       "      <th>recall_train</th>\n",
       "      <th>recall_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>0.881821</td>\n",
       "      <td>0.885137</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.001284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>DecisionTree</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.888234</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.512836</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.538511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>DecisionTree_pruned</td>\n",
       "      <td>0.883559</td>\n",
       "      <td>0.886243</td>\n",
       "      <td>0.576159</td>\n",
       "      <td>0.557252</td>\n",
       "      <td>0.046636</td>\n",
       "      <td>0.046855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>RandomForest</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.910793</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.655080</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.471759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>RandomForest_pruned</td>\n",
       "      <td>0.903466</td>\n",
       "      <td>0.901799</td>\n",
       "      <td>0.738701</td>\n",
       "      <td>0.679936</td>\n",
       "      <td>0.280354</td>\n",
       "      <td>0.274069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>BaggingClassifier</td>\n",
       "      <td>0.999968</td>\n",
       "      <td>0.909909</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.618644</td>\n",
       "      <td>0.999732</td>\n",
       "      <td>0.562259</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 model  accuracy_train  accuracy_test  precision_train  \\\n",
       "0   LogisticRegression        0.881821       0.885137         0.000000   \n",
       "0         DecisionTree        1.000000       0.888234         1.000000   \n",
       "0  DecisionTree_pruned        0.883559       0.886243         0.576159   \n",
       "0         RandomForest        1.000000       0.910793         1.000000   \n",
       "0  RandomForest_pruned        0.903466       0.901799         0.738701   \n",
       "0    BaggingClassifier        0.999968       0.909909         1.000000   \n",
       "\n",
       "   precision_test  recall_train  recall_test  \n",
       "0        0.500000      0.000000     0.001284  \n",
       "0        0.512836      1.000000     0.538511  \n",
       "0        0.557252      0.046636     0.046855  \n",
       "0        0.655080      1.000000     0.471759  \n",
       "0        0.679936      0.280354     0.274069  \n",
       "0        0.618644      0.999732     0.562259  "
      ]
     },
     "execution_count": 833,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tempresultsdf = pd.DataFrame({'model':['BaggingClassifier'], \n",
    "                          'accuracy_train':[acc_BG_training],\n",
    "                         'accuracy_test':[acc_BG], \n",
    "                          'precision_train':[metrics.precision_score(y_train,pred_BG_training)],\n",
    "                         'precision_test':[metrics.precision_score(y_test,pred_BG)], \n",
    "                          'recall_train':[metrics.recall_score(y_train,pred_BG_training)],\n",
    "                         'recall_test':[metrics.recall_score(y_test,pred_BG)]})\n",
    "resultsdf = pd.concat([resultsdf, tempresultsdf])\n",
    "resultsdf "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 834,
   "metadata": {},
   "outputs": [],
   "source": [
    "dt=DecisionTreeClassifier(criterion = \"entropy\", random_state = 100,\n",
    "                              max_depth=7, min_samples_leaf=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 835,
   "metadata": {},
   "outputs": [],
   "source": [
    "bgcl_dt = BaggingClassifier(base_estimator = dt, n_estimators=100, max_samples= 1.0, bootstrap=True, random_state=100)\n",
    "bgcl_dt = bgcl_dt.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 836,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing Accuracy : 0.9135948097906222\n",
      "Training Accuracy : 0.9202136063449932\n",
      "precision of test dataset 0.6309362279511533\n",
      "precision of train dataset 0.6752906976744186\n",
      "recall of test dataset 0.5969191270860077\n",
      "recall of train dataset 0.6226212811578665\n"
     ]
    }
   ],
   "source": [
    "pred_BG_dt = bgcl_dt.predict(x_test)\n",
    "acc_BG_dt = accuracy_score(y_test, pred_BG_dt)\n",
    "print (\"Testing Accuracy :\",acc_BG_dt)\n",
    "pred_BG_dt_training = bgcl_dt.predict(x_train)\n",
    "acc_BG_dt_training= accuracy_score(y_train, pred_BG_dt_training)\n",
    "print (\"Training Accuracy :\",acc_BG_dt_training)\n",
    "print('precision of test dataset ' + str(metrics.precision_score(y_test,pred_BG_dt)))\n",
    "print('precision of train dataset ' + str(metrics.precision_score(y_train,pred_BG_dt_training)))\n",
    "print('recall of test dataset ' + str(metrics.recall_score(y_test,pred_BG_dt)))\n",
    "print('recall of train dataset ' + str(metrics.recall_score(y_train,pred_BG_dt_training)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 837,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "confusion matrix of test dataset = \n",
      " [[11462   544]\n",
      " [  628   930]]\n",
      "confusion matrix of trained dataset = \n",
      " [[26799  1117]\n",
      " [ 1408  2323]]\n"
     ]
    }
   ],
   "source": [
    "print(\"confusion matrix of test dataset = \\n\",confusion_matrix(y_test, pred_BG_dt))\n",
    "print(\"confusion matrix of trained dataset = \\n\",confusion_matrix(y_train,pred_BG_dt_training))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 838,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>accuracy_train</th>\n",
       "      <th>accuracy_test</th>\n",
       "      <th>precision_train</th>\n",
       "      <th>precision_test</th>\n",
       "      <th>recall_train</th>\n",
       "      <th>recall_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>0.881821</td>\n",
       "      <td>0.885137</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.001284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>DecisionTree</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.888234</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.512836</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.538511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>DecisionTree_pruned</td>\n",
       "      <td>0.883559</td>\n",
       "      <td>0.886243</td>\n",
       "      <td>0.576159</td>\n",
       "      <td>0.557252</td>\n",
       "      <td>0.046636</td>\n",
       "      <td>0.046855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>RandomForest</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.910793</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.655080</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.471759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>RandomForest_pruned</td>\n",
       "      <td>0.903466</td>\n",
       "      <td>0.901799</td>\n",
       "      <td>0.738701</td>\n",
       "      <td>0.679936</td>\n",
       "      <td>0.280354</td>\n",
       "      <td>0.274069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>BaggingClassifier</td>\n",
       "      <td>0.999968</td>\n",
       "      <td>0.909909</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.618644</td>\n",
       "      <td>0.999732</td>\n",
       "      <td>0.562259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>BaggingClassifier_DT</td>\n",
       "      <td>0.920214</td>\n",
       "      <td>0.913595</td>\n",
       "      <td>0.675291</td>\n",
       "      <td>0.630936</td>\n",
       "      <td>0.622621</td>\n",
       "      <td>0.596919</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  model  accuracy_train  accuracy_test  precision_train  \\\n",
       "0    LogisticRegression        0.881821       0.885137         0.000000   \n",
       "0          DecisionTree        1.000000       0.888234         1.000000   \n",
       "0   DecisionTree_pruned        0.883559       0.886243         0.576159   \n",
       "0          RandomForest        1.000000       0.910793         1.000000   \n",
       "0   RandomForest_pruned        0.903466       0.901799         0.738701   \n",
       "0     BaggingClassifier        0.999968       0.909909         1.000000   \n",
       "0  BaggingClassifier_DT        0.920214       0.913595         0.675291   \n",
       "\n",
       "   precision_test  recall_train  recall_test  \n",
       "0        0.500000      0.000000     0.001284  \n",
       "0        0.512836      1.000000     0.538511  \n",
       "0        0.557252      0.046636     0.046855  \n",
       "0        0.655080      1.000000     0.471759  \n",
       "0        0.679936      0.280354     0.274069  \n",
       "0        0.618644      0.999732     0.562259  \n",
       "0        0.630936      0.622621     0.596919  "
      ]
     },
     "execution_count": 838,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tempresultsdf = pd.DataFrame({'model':['BaggingClassifier_DT'], \n",
    "                          'accuracy_train':[acc_BG_dt_training],\n",
    "                         'accuracy_test':[acc_BG_dt], \n",
    "                          'precision_train':[metrics.precision_score(y_train,pred_BG_dt_training)],\n",
    "                         'precision_test':[metrics.precision_score(y_test,pred_BG_dt)], \n",
    "                          'recall_train':[metrics.recall_score(y_train,pred_BG_dt_training)],\n",
    "                         'recall_test':[metrics.recall_score(y_test,pred_BG_dt)]})\n",
    "resultsdf = pd.concat([resultsdf, tempresultsdf])\n",
    "resultsdf "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 839,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "lr = LogisticRegression()\n",
    "bgcl_lr = BaggingClassifier(base_estimator = lr, n_estimators=100, max_samples= 1.0, bootstrap=True, random_state=100)\n",
    "bgcl_lr = bgcl_lr.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 840,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing Accuracy : 0.8851371276909467\n",
      "Training Accuracy : 0.8821057288210573\n",
      "precision of test dataset 0.0\n",
      "precision of train dataset 0.0\n",
      "recall of test dataset 0.0\n",
      "recall of train dataset 0.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "pred_BG_lr = bgcl_lr.predict(x_test)\n",
    "acc_BG_lr = accuracy_score(y_test, pred_BG_lr)\n",
    "print (\"Testing Accuracy :\",acc_BG_lr)\n",
    "pred_BG_lr_training = bgcl_lr.predict(x_train)\n",
    "acc_BG_lr_training= accuracy_score(y_train, pred_BG_lr_training)\n",
    "print (\"Training Accuracy :\",acc_BG_lr_training)\n",
    "print('precision of test dataset ' + str(metrics.precision_score(y_test,pred_BG_lr)))\n",
    "print('precision of train dataset ' + str(metrics.precision_score(y_train,pred_BG_lr_training)))\n",
    "print('recall of test dataset ' + str(metrics.recall_score(y_test,pred_BG_lr)))\n",
    "print('recall of train dataset ' + str(metrics.recall_score(y_train,pred_BG_lr_training)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 841,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "confusion matrix of test dataset = \n",
      " [[12006     0]\n",
      " [ 1558     0]]\n",
      "confusion matrix of trained dataset = \n",
      " [[27916     0]\n",
      " [ 3731     0]]\n"
     ]
    }
   ],
   "source": [
    "print(\"confusion matrix of test dataset = \\n\",confusion_matrix(y_test, pred_BG_lr))\n",
    "print(\"confusion matrix of trained dataset = \\n\",confusion_matrix(y_train,pred_BG_lr_training))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 842,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>accuracy_train</th>\n",
       "      <th>accuracy_test</th>\n",
       "      <th>precision_train</th>\n",
       "      <th>precision_test</th>\n",
       "      <th>recall_train</th>\n",
       "      <th>recall_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>0.881821</td>\n",
       "      <td>0.885137</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.001284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>DecisionTree</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.888234</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.512836</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.538511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>DecisionTree_pruned</td>\n",
       "      <td>0.883559</td>\n",
       "      <td>0.886243</td>\n",
       "      <td>0.576159</td>\n",
       "      <td>0.557252</td>\n",
       "      <td>0.046636</td>\n",
       "      <td>0.046855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>RandomForest</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.910793</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.655080</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.471759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>RandomForest_pruned</td>\n",
       "      <td>0.903466</td>\n",
       "      <td>0.901799</td>\n",
       "      <td>0.738701</td>\n",
       "      <td>0.679936</td>\n",
       "      <td>0.280354</td>\n",
       "      <td>0.274069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>BaggingClassifier</td>\n",
       "      <td>0.999968</td>\n",
       "      <td>0.909909</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.618644</td>\n",
       "      <td>0.999732</td>\n",
       "      <td>0.562259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>BaggingClassifier_DT</td>\n",
       "      <td>0.920214</td>\n",
       "      <td>0.913595</td>\n",
       "      <td>0.675291</td>\n",
       "      <td>0.630936</td>\n",
       "      <td>0.622621</td>\n",
       "      <td>0.596919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>BaggingClassifier_LR</td>\n",
       "      <td>0.882106</td>\n",
       "      <td>0.885137</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  model  accuracy_train  accuracy_test  precision_train  \\\n",
       "0    LogisticRegression        0.881821       0.885137         0.000000   \n",
       "0          DecisionTree        1.000000       0.888234         1.000000   \n",
       "0   DecisionTree_pruned        0.883559       0.886243         0.576159   \n",
       "0          RandomForest        1.000000       0.910793         1.000000   \n",
       "0   RandomForest_pruned        0.903466       0.901799         0.738701   \n",
       "0     BaggingClassifier        0.999968       0.909909         1.000000   \n",
       "0  BaggingClassifier_DT        0.920214       0.913595         0.675291   \n",
       "0  BaggingClassifier_LR        0.882106       0.885137         0.000000   \n",
       "\n",
       "   precision_test  recall_train  recall_test  \n",
       "0        0.500000      0.000000     0.001284  \n",
       "0        0.512836      1.000000     0.538511  \n",
       "0        0.557252      0.046636     0.046855  \n",
       "0        0.655080      1.000000     0.471759  \n",
       "0        0.679936      0.280354     0.274069  \n",
       "0        0.618644      0.999732     0.562259  \n",
       "0        0.630936      0.622621     0.596919  \n",
       "0        0.000000      0.000000     0.000000  "
      ]
     },
     "execution_count": 842,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tempresultsdf = pd.DataFrame({'model':['BaggingClassifier_LR'], \n",
    "                          'accuracy_train':[acc_BG_lr_training],\n",
    "                         'accuracy_test':[acc_BG_lr], \n",
    "                          'precision_train':[metrics.precision_score(y_train,pred_BG_lr_training)],\n",
    "                         'precision_test':[metrics.precision_score(y_test,pred_BG_lr)], \n",
    "                          'recall_train':[metrics.recall_score(y_train,pred_BG_lr_training)],\n",
    "                         'recall_test':[metrics.recall_score(y_test,pred_BG_lr)]})\n",
    "resultsdf = pd.concat([resultsdf, tempresultsdf])\n",
    "resultsdf "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.6.2 ADA Boosting Technique"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 843,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "abcl = AdaBoostClassifier( n_estimators= 100,learning_rate=1.0 ,random_state=100)\n",
    "abcl = abcl.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 844,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing Accuracy : 0.9067384252432911\n",
      "Training Accuracy : 0.9006540904351124\n",
      "precision of test dataset 0.6553552492046659\n",
      "precision of train dataset 0.6360686138154845\n",
      "recall of test dataset 0.39666238767650835\n",
      "recall of train dataset 0.3677298311444653\n"
     ]
    }
   ],
   "source": [
    "pred_AB = abcl.predict(x_test)\n",
    "acc_AB = accuracy_score(y_test, pred_AB)\n",
    "print (\"Testing Accuracy :\",acc_AB)\n",
    "pred_AB_training = abcl.predict(x_train)\n",
    "acc_AB_training= accuracy_score(y_train, pred_AB_training)\n",
    "print (\"Training Accuracy :\",acc_AB_training)\n",
    "print('precision of test dataset ' + str(metrics.precision_score(y_test,pred_AB)))\n",
    "print('precision of train dataset ' + str(metrics.precision_score(y_train,pred_AB_training)))\n",
    "print('recall of test dataset ' + str(metrics.recall_score(y_test,pred_AB)))\n",
    "print('recall of train dataset ' + str(metrics.recall_score(y_train,pred_AB_training)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 845,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "confusion matrix of test dataset = \n",
      " [[11681   325]\n",
      " [  940   618]]\n",
      "confusion matrix of trained dataset = \n",
      " [[27131   785]\n",
      " [ 2359  1372]]\n"
     ]
    }
   ],
   "source": [
    "print(\"confusion matrix of test dataset = \\n\",confusion_matrix(y_test, pred_AB))\n",
    "print(\"confusion matrix of trained dataset = \\n\",confusion_matrix(y_train,pred_AB_training))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 846,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>accuracy_train</th>\n",
       "      <th>accuracy_test</th>\n",
       "      <th>precision_train</th>\n",
       "      <th>precision_test</th>\n",
       "      <th>recall_train</th>\n",
       "      <th>recall_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>0.881821</td>\n",
       "      <td>0.885137</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.001284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>DecisionTree</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.888234</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.512836</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.538511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>DecisionTree_pruned</td>\n",
       "      <td>0.883559</td>\n",
       "      <td>0.886243</td>\n",
       "      <td>0.576159</td>\n",
       "      <td>0.557252</td>\n",
       "      <td>0.046636</td>\n",
       "      <td>0.046855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>RandomForest</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.910793</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.655080</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.471759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>RandomForest_pruned</td>\n",
       "      <td>0.903466</td>\n",
       "      <td>0.901799</td>\n",
       "      <td>0.738701</td>\n",
       "      <td>0.679936</td>\n",
       "      <td>0.280354</td>\n",
       "      <td>0.274069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>BaggingClassifier</td>\n",
       "      <td>0.999968</td>\n",
       "      <td>0.909909</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.618644</td>\n",
       "      <td>0.999732</td>\n",
       "      <td>0.562259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>BaggingClassifier_DT</td>\n",
       "      <td>0.920214</td>\n",
       "      <td>0.913595</td>\n",
       "      <td>0.675291</td>\n",
       "      <td>0.630936</td>\n",
       "      <td>0.622621</td>\n",
       "      <td>0.596919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>BaggingClassifier_LR</td>\n",
       "      <td>0.882106</td>\n",
       "      <td>0.885137</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>ADABoosting</td>\n",
       "      <td>0.900654</td>\n",
       "      <td>0.906738</td>\n",
       "      <td>0.636069</td>\n",
       "      <td>0.655355</td>\n",
       "      <td>0.367730</td>\n",
       "      <td>0.396662</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  model  accuracy_train  accuracy_test  precision_train  \\\n",
       "0    LogisticRegression        0.881821       0.885137         0.000000   \n",
       "0          DecisionTree        1.000000       0.888234         1.000000   \n",
       "0   DecisionTree_pruned        0.883559       0.886243         0.576159   \n",
       "0          RandomForest        1.000000       0.910793         1.000000   \n",
       "0   RandomForest_pruned        0.903466       0.901799         0.738701   \n",
       "0     BaggingClassifier        0.999968       0.909909         1.000000   \n",
       "0  BaggingClassifier_DT        0.920214       0.913595         0.675291   \n",
       "0  BaggingClassifier_LR        0.882106       0.885137         0.000000   \n",
       "0           ADABoosting        0.900654       0.906738         0.636069   \n",
       "\n",
       "   precision_test  recall_train  recall_test  \n",
       "0        0.500000      0.000000     0.001284  \n",
       "0        0.512836      1.000000     0.538511  \n",
       "0        0.557252      0.046636     0.046855  \n",
       "0        0.655080      1.000000     0.471759  \n",
       "0        0.679936      0.280354     0.274069  \n",
       "0        0.618644      0.999732     0.562259  \n",
       "0        0.630936      0.622621     0.596919  \n",
       "0        0.000000      0.000000     0.000000  \n",
       "0        0.655355      0.367730     0.396662  "
      ]
     },
     "execution_count": 846,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tempresultsdf = pd.DataFrame({'model':['ADABoosting'], \n",
    "                          'accuracy_train':[acc_AB_training],\n",
    "                         'accuracy_test':[acc_AB], \n",
    "                          'precision_train':[metrics.precision_score(y_train,pred_AB_training)],\n",
    "                         'precision_test':[metrics.precision_score(y_test,pred_AB)], \n",
    "                          'recall_train':[metrics.recall_score(y_train,pred_AB_training)],\n",
    "                         'recall_test':[metrics.recall_score(y_test,pred_AB)]})\n",
    "resultsdf = pd.concat([resultsdf, tempresultsdf])\n",
    "resultsdf "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.6.2 Gradient Boosting Technique"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 847,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "gbcl = GradientBoostingClassifier(n_estimators = 100,learning_rate=0.2, random_state=100)\n",
    "gbcl = gbcl.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 848,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing Accuracy : 0.9147744028310233\n",
      "Training Accuracy : 0.9209087749233734\n",
      "precision of test dataset 0.6446043165467625\n",
      "precision of train dataset 0.6932032724984267\n",
      "recall of test dataset 0.5750962772785623\n",
      "recall of train dataset 0.5904583221656392\n"
     ]
    }
   ],
   "source": [
    "pred_GB = gbcl.predict(x_test)\n",
    "acc_GB = accuracy_score(y_test, pred_GB)\n",
    "print (\"Testing Accuracy :\",acc_GB)\n",
    "pred_GB_training = gbcl.predict(x_train)\n",
    "acc_GB_training= accuracy_score(y_train, pred_GB_training)\n",
    "print (\"Training Accuracy :\",acc_GB_training)\n",
    "print('precision of test dataset ' + str(metrics.precision_score(y_test,pred_GB)))\n",
    "print('precision of train dataset ' + str(metrics.precision_score(y_train,pred_GB_training)))\n",
    "print('recall of test dataset ' + str(metrics.recall_score(y_test,pred_GB)))\n",
    "print('recall of train dataset ' + str(metrics.recall_score(y_train,pred_GB_training)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 849,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "confusion matrix of test dataset = \n",
      " [[11512   494]\n",
      " [  662   896]]\n",
      "confusion matrix of trained dataset = \n",
      " [[26941   975]\n",
      " [ 1528  2203]]\n"
     ]
    }
   ],
   "source": [
    "print(\"confusion matrix of test dataset = \\n\",confusion_matrix(y_test, pred_GB))\n",
    "print(\"confusion matrix of trained dataset = \\n\",confusion_matrix(y_train,pred_GB_training))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 850,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>accuracy_train</th>\n",
       "      <th>accuracy_test</th>\n",
       "      <th>precision_train</th>\n",
       "      <th>precision_test</th>\n",
       "      <th>recall_train</th>\n",
       "      <th>recall_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>0.881821</td>\n",
       "      <td>0.885137</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.001284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>DecisionTree</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.888234</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.512836</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.538511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>DecisionTree_pruned</td>\n",
       "      <td>0.883559</td>\n",
       "      <td>0.886243</td>\n",
       "      <td>0.576159</td>\n",
       "      <td>0.557252</td>\n",
       "      <td>0.046636</td>\n",
       "      <td>0.046855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>RandomForest</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.910793</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.655080</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.471759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>RandomForest_pruned</td>\n",
       "      <td>0.903466</td>\n",
       "      <td>0.901799</td>\n",
       "      <td>0.738701</td>\n",
       "      <td>0.679936</td>\n",
       "      <td>0.280354</td>\n",
       "      <td>0.274069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>BaggingClassifier</td>\n",
       "      <td>0.999968</td>\n",
       "      <td>0.909909</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.618644</td>\n",
       "      <td>0.999732</td>\n",
       "      <td>0.562259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>BaggingClassifier_DT</td>\n",
       "      <td>0.920214</td>\n",
       "      <td>0.913595</td>\n",
       "      <td>0.675291</td>\n",
       "      <td>0.630936</td>\n",
       "      <td>0.622621</td>\n",
       "      <td>0.596919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>BaggingClassifier_LR</td>\n",
       "      <td>0.882106</td>\n",
       "      <td>0.885137</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>ADABoosting</td>\n",
       "      <td>0.900654</td>\n",
       "      <td>0.906738</td>\n",
       "      <td>0.636069</td>\n",
       "      <td>0.655355</td>\n",
       "      <td>0.367730</td>\n",
       "      <td>0.396662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>GradientBoosting</td>\n",
       "      <td>0.920909</td>\n",
       "      <td>0.914774</td>\n",
       "      <td>0.693203</td>\n",
       "      <td>0.644604</td>\n",
       "      <td>0.590458</td>\n",
       "      <td>0.575096</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  model  accuracy_train  accuracy_test  precision_train  \\\n",
       "0    LogisticRegression        0.881821       0.885137         0.000000   \n",
       "0          DecisionTree        1.000000       0.888234         1.000000   \n",
       "0   DecisionTree_pruned        0.883559       0.886243         0.576159   \n",
       "0          RandomForest        1.000000       0.910793         1.000000   \n",
       "0   RandomForest_pruned        0.903466       0.901799         0.738701   \n",
       "0     BaggingClassifier        0.999968       0.909909         1.000000   \n",
       "0  BaggingClassifier_DT        0.920214       0.913595         0.675291   \n",
       "0  BaggingClassifier_LR        0.882106       0.885137         0.000000   \n",
       "0           ADABoosting        0.900654       0.906738         0.636069   \n",
       "0      GradientBoosting        0.920909       0.914774         0.693203   \n",
       "\n",
       "   precision_test  recall_train  recall_test  \n",
       "0        0.500000      0.000000     0.001284  \n",
       "0        0.512836      1.000000     0.538511  \n",
       "0        0.557252      0.046636     0.046855  \n",
       "0        0.655080      1.000000     0.471759  \n",
       "0        0.679936      0.280354     0.274069  \n",
       "0        0.618644      0.999732     0.562259  \n",
       "0        0.630936      0.622621     0.596919  \n",
       "0        0.000000      0.000000     0.000000  \n",
       "0        0.655355      0.367730     0.396662  \n",
       "0        0.644604      0.590458     0.575096  "
      ]
     },
     "execution_count": 850,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tempresultsdf = pd.DataFrame({'model':['GradientBoosting'], \n",
    "                          'accuracy_train':[acc_GB_training],\n",
    "                         'accuracy_test':[acc_GB], \n",
    "                          'precision_train':[metrics.precision_score(y_train,pred_GB_training)],\n",
    "                         'precision_test':[metrics.precision_score(y_test,pred_GB)], \n",
    "                          'recall_train':[metrics.recall_score(y_train,pred_GB_training)],\n",
    "                         'recall_test':[metrics.recall_score(y_test,pred_GB)]})\n",
    "resultsdf = pd.concat([resultsdf, tempresultsdf])\n",
    "resultsdf "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 851,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "gbcl_pr = GradientBoostingClassifier(max_depth = 6, max_leaf_nodes = 5, n_estimators = 100,learning_rate=0.6, random_state=100)\n",
    "gbcl_pr = gbcl_pr.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 852,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing Accuracy : 0.912194043055146\n",
      "Training Accuracy : 0.9284292349985781\n",
      "precision of test dataset 0.6298655343241331\n",
      "precision of train dataset 0.7233394271785497\n",
      "recall of test dataset 0.5712451861360719\n",
      "recall of train dataset 0.6362905387295631\n"
     ]
    }
   ],
   "source": [
    "pred_GB_pr = gbcl_pr.predict(x_test)\n",
    "acc_GB_pr = accuracy_score(y_test, pred_GB_pr)\n",
    "print (\"Testing Accuracy :\",acc_GB_pr)\n",
    "pred_GB_pr_training = gbcl_pr.predict(x_train)\n",
    "acc_GB_pr_training= accuracy_score(y_train, pred_GB_pr_training)\n",
    "print (\"Training Accuracy :\",acc_GB_pr_training)\n",
    "print('precision of test dataset ' + str(metrics.precision_score(y_test,pred_GB_pr)))\n",
    "print('precision of train dataset ' + str(metrics.precision_score(y_train,pred_GB_pr_training)))\n",
    "print('recall of test dataset ' + str(metrics.recall_score(y_test,pred_GB_pr)))\n",
    "print('recall of train dataset ' + str(metrics.recall_score(y_train,pred_GB_pr_training)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 853,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "confusion matrix of test dataset = \n",
      " [[11483   523]\n",
      " [  668   890]]\n",
      "confusion matrix of trained dataset = \n",
      " [[27008   908]\n",
      " [ 1357  2374]]\n"
     ]
    }
   ],
   "source": [
    "print(\"confusion matrix of test dataset = \\n\",confusion_matrix(y_test, pred_GB_pr))\n",
    "print(\"confusion matrix of trained dataset = \\n\",confusion_matrix(y_train,pred_GB_pr_training))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 854,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>accuracy_train</th>\n",
       "      <th>accuracy_test</th>\n",
       "      <th>precision_train</th>\n",
       "      <th>precision_test</th>\n",
       "      <th>recall_train</th>\n",
       "      <th>recall_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>0.881821</td>\n",
       "      <td>0.885137</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.001284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>DecisionTree</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.888234</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.512836</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.538511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>DecisionTree_pruned</td>\n",
       "      <td>0.883559</td>\n",
       "      <td>0.886243</td>\n",
       "      <td>0.576159</td>\n",
       "      <td>0.557252</td>\n",
       "      <td>0.046636</td>\n",
       "      <td>0.046855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>RandomForest</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.910793</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.655080</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.471759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>RandomForest_pruned</td>\n",
       "      <td>0.903466</td>\n",
       "      <td>0.901799</td>\n",
       "      <td>0.738701</td>\n",
       "      <td>0.679936</td>\n",
       "      <td>0.280354</td>\n",
       "      <td>0.274069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>BaggingClassifier</td>\n",
       "      <td>0.999968</td>\n",
       "      <td>0.909909</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.618644</td>\n",
       "      <td>0.999732</td>\n",
       "      <td>0.562259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>BaggingClassifier_DT</td>\n",
       "      <td>0.920214</td>\n",
       "      <td>0.913595</td>\n",
       "      <td>0.675291</td>\n",
       "      <td>0.630936</td>\n",
       "      <td>0.622621</td>\n",
       "      <td>0.596919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>BaggingClassifier_LR</td>\n",
       "      <td>0.882106</td>\n",
       "      <td>0.885137</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>ADABoosting</td>\n",
       "      <td>0.900654</td>\n",
       "      <td>0.906738</td>\n",
       "      <td>0.636069</td>\n",
       "      <td>0.655355</td>\n",
       "      <td>0.367730</td>\n",
       "      <td>0.396662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>GradientBoosting</td>\n",
       "      <td>0.920909</td>\n",
       "      <td>0.914774</td>\n",
       "      <td>0.693203</td>\n",
       "      <td>0.644604</td>\n",
       "      <td>0.590458</td>\n",
       "      <td>0.575096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>GradientBoosting_pruned</td>\n",
       "      <td>0.928429</td>\n",
       "      <td>0.912194</td>\n",
       "      <td>0.723339</td>\n",
       "      <td>0.629866</td>\n",
       "      <td>0.636291</td>\n",
       "      <td>0.571245</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     model  accuracy_train  accuracy_test  precision_train  \\\n",
       "0       LogisticRegression        0.881821       0.885137         0.000000   \n",
       "0             DecisionTree        1.000000       0.888234         1.000000   \n",
       "0      DecisionTree_pruned        0.883559       0.886243         0.576159   \n",
       "0             RandomForest        1.000000       0.910793         1.000000   \n",
       "0      RandomForest_pruned        0.903466       0.901799         0.738701   \n",
       "0        BaggingClassifier        0.999968       0.909909         1.000000   \n",
       "0     BaggingClassifier_DT        0.920214       0.913595         0.675291   \n",
       "0     BaggingClassifier_LR        0.882106       0.885137         0.000000   \n",
       "0              ADABoosting        0.900654       0.906738         0.636069   \n",
       "0         GradientBoosting        0.920909       0.914774         0.693203   \n",
       "0  GradientBoosting_pruned        0.928429       0.912194         0.723339   \n",
       "\n",
       "   precision_test  recall_train  recall_test  \n",
       "0        0.500000      0.000000     0.001284  \n",
       "0        0.512836      1.000000     0.538511  \n",
       "0        0.557252      0.046636     0.046855  \n",
       "0        0.655080      1.000000     0.471759  \n",
       "0        0.679936      0.280354     0.274069  \n",
       "0        0.618644      0.999732     0.562259  \n",
       "0        0.630936      0.622621     0.596919  \n",
       "0        0.000000      0.000000     0.000000  \n",
       "0        0.655355      0.367730     0.396662  \n",
       "0        0.644604      0.590458     0.575096  \n",
       "0        0.629866      0.636291     0.571245  "
      ]
     },
     "execution_count": 854,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tempresultsdf = pd.DataFrame({'model':['GradientBoosting_pruned'], \n",
    "                          'accuracy_train':[acc_GB_pr_training],\n",
    "                         'accuracy_test':[acc_GB_pr], \n",
    "                          'precision_train':[metrics.precision_score(y_train,pred_GB_pr_training)],\n",
    "                         'precision_test':[metrics.precision_score(y_test,pred_GB_pr)], \n",
    "                          'recall_train':[metrics.recall_score(y_train,pred_GB_pr_training)],\n",
    "                         'recall_test':[metrics.recall_score(y_test,pred_GB_pr)]})\n",
    "resultsdf = pd.concat([resultsdf, tempresultsdf])\n",
    "resultsdf "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Obvioulsy many more models can be built to train the dataset and test it out. We can try to optimise by playing arond with the hyperparameters (see q4) <br>\n",
    "<br>\n",
    "From the models run above the best model is BaggingClassifier_DT in which it is most stable between trained scores and test scores and exhibits a highest recall scores which is important for this problem where the algorithm is required to identify those customers who are most likely to sign up (true positives)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4 Tuning the Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# hyperparameters\n",
    "\n",
    "criterion = the function used to evaluate the quality of a split. <br>\n",
    "base_estimator = what is the initial model <br>\n",
    "max_depth = maximum number of levels allowed in each tree.<br>\n",
    "max_features = maximum number of features considered when splitting a node.<br>\n",
    "min_samples_leaf = minimum number of samples which can be stored in a tree leaf.<br>\n",
    "min_samples_split = minimum number of samples necessary in a node to cause node splitting.<br>\n",
    "n_estimators = number of trees in the ensemble. <br>\n",
    "max_leaf_nodes = max number of leaf nodes at each depth (in best-first fashion, where best nodes are defined as relative reduction in impurity)<br>\n",
    "bootstrap = <br>\n",
    "    Whether samples are drawn with replacement. If False, sampling without replacement is performed. <br>\n",
    "bootstrap_features =<br>\n",
    "    Whether features are drawn with replacement.<br>\n",
    "learning_rate = s the contribution of each model to the weights and defaults to 1 . Reducing the learning rate will mean the weights will be increased or decreased to a small degree, forcing the model train slower (but sometimes resulting in better performance scores). <br>\n",
    "\n",
    "https://towardsdatascience.com/hyperparameters-optimization-526348bb8e2d"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Random Forest_pruned hyperparameters\n",
    "##clf_pruned = DecisionTreeClassifier(criterion = \"entropy\", random_state = 100,\n",
    "##                               max_depth=3, max_features=9)\"\n",
    "max_depth=3\n",
    "min_samples_split=2,\n",
    "min_samples_leaf=1,\n",
    "min_weight_fraction_leaf=0.0,\n",
    "max_features=9,\n",
    "max_leaf_nodes=None,"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Bagging Method hyperparameters\n",
    "\n",
    "##bgcl = BaggingClassifier(n_estimators=100, max_samples= 1.0, bootstrap=True, random_state=100)\n",
    "\n",
    "    base_estimator=decisiontree,\n",
    "    n_estimators=100,\n",
    "    max_samples=1.0,\n",
    "    max_features=1.0,\n",
    "    bootstrap=True,\n",
    "    bootstrap_features=False,"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Bagging with Decision Tree\n",
    "\n",
    "#bgcl_dt = BaggingClassifier(base_estimator = dt, n_estimators=100, max_samples= 1.0, bootstrap=True, random_state=100)\n",
    "\n",
    "    base_estimator=dt,\n",
    "    n_estimators=100,\n",
    "    max_samples=1.0,\n",
    "    max_features=1.0,\n",
    "    bootstrap=True,\n",
    "    bootstrap_features=False,"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Bagging with LR\n",
    "\n",
    "bgcl_lr = BaggingClassifier(base_estimator = lr, n_estimators=100, max_samples= 1.0, bootstrap=True, random_state=100)\n",
    "\n",
    "base_estimator=lr,\n",
    "    n_estimators=100,\n",
    "    max_samples=1.0,\n",
    "    max_features=1.0,\n",
    "    bootstrap=True,\n",
    "    bootstrap_features=False,"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "ADA Boosting\n",
    "\n",
    "abcl = AdaBoostClassifier( n_estimators= 100,learning_rate=1.0 ,random_state=100)\n",
    "\n",
    "    base_estimator=DecisionTreeClassifier(max_depth=1),\n",
    "    n_estimators=100,\n",
    "    learning_rate=1.0,\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Gradient Boosting\n",
    "\n",
    "GradientBoostingClassifier(n_estimators = 100,learning_rate=0.2, random_state=100)\n",
    "\n",
    "    learning_rate=0.2,\n",
    "    n_estimators=100,\n",
    "    min_samples_split=2,\n",
    "    min_samples_leaf=1,\n",
    "    min_weight_fraction_leaf=0.0,\n",
    "    max_depth=3,\n",
    "    max_features=all features,\n",
    "    max_leaf_nodes=unlimted number of nodes,\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "GR boosting pruned\n",
    "\n",
    "GradientBoostingClassifier(max_depth = 6, max_leaf_nodes = 5, n_estimators = 100,learning_rate=0.6, random_state=100)\n",
    "gbcl_pr = gbcl_pr.fit(x_train, y_train)\n",
    "\n",
    "    learning_rate=0.6,\n",
    "    n_estimators=100,\n",
    "    min_samples_split=2,\n",
    "    min_samples_leaf=5,\n",
    "    max_depth=6,\n",
    "    max_features=all features,\n",
    "    max_leaf_nodes=unlimted number of nodes,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In conclusion, for each model we can try with many combination of these hyper parameters to try to find the best perfroming algorithm. <br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
